<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue May 05 11:38:19 2020
<BR><P>
<H3>Maximum Stack Usage =        912 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vgcanvas_nanovg_arc_to &rArr; nvgArcTo &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1aa]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">MemManage_Handler</a><BR>
 <LI><a href="#[aa]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[aa]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[3c6]">node_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c6]">node_merge</a><BR>
 <LI><a href="#[425]">nvg__tesselateBezier</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[425]">nvg__tesselateBezier</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[aa]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ac]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ad]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ae]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[af]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b0]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b1]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b2]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b3]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b4]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ba]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9c]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9e]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[ab]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FTL_CheckBadBlock</a> from ftl.o(i.FTL_CheckBadBlock) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[23]">FTL_CreateLUT</a> from ftl.o(i.FTL_CreateLUT) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[21]">FTL_FindSamePlaneUnusedBlock</a> from ftl.o(i.FTL_FindSamePlaneUnusedBlock) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[20]">FTL_FindUnusedBlock</a> from ftl.o(i.FTL_FindUnusedBlock) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[24]">FTL_Format</a> from ftl.o(i.FTL_Format) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1d]">FTL_Init</a> from ftl.o(i.FTL_Init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[22]">FTL_LBNToPBN</a> from ftl.o(i.FTL_LBNToPBN) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1f]">FTL_UsedBlockMark</a> from ftl.o(i.FTL_UsedBlockMark) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9a]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a9]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a6]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b5]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b6]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b7]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b8]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b9]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a5]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a4]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a7]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">MemManage_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">NAND_CopyPageWithoutWrite</a> from nand.o(i.NAND_CopyPageWithoutWrite) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[13]">NAND_EraseBlock</a> from nand.o(i.NAND_EraseBlock) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[14]">NAND_EraseChip</a> from nand.o(i.NAND_EraseChip) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[12]">NAND_ModeSet</a> from nand.o(i.NAND_ModeSet) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2a]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9f]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bb]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a8]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a0]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">SysTick_Handler</a> from sys_tick_handler.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bd]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[35]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a1]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a2]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">TIM4_IRQHandler</a> from usmart.o(i.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c3]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[58]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[bc]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[cb]">void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c9]">void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c7]">void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c5]">void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[cd]">void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[cf]">void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</a> from nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[ca]">void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c8]">void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c6]">void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[c4]">void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[cc]">void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[ce]">void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</a> from nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi) referenced from nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
 <LI><a href="#[e1]">aggenvg__setLineCap(void*, int)</a> from nanovg_agge.o(i._Z19aggenvg__setLineCapPvi) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[ea]">aggenvg__renderFlush(void*)</a> from nanovg_agge.o(i._Z20aggenvg__renderFlushPv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e0]">aggenvg__setLineJoin(void*, int)</a> from nanovg_agge.o(i._Z20aggenvg__setLineJoinPvi) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e9]">aggenvg__renderCancel(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderCancelPv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e2]">aggenvg__renderCreate(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderCreatePv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[eb]">aggenvg__renderDelete(void*)</a> from nanovg_agge.o(i._Z21aggenvg__renderDeletePv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e8]">aggenvg__renderViewport(void*, float, float, float)</a> from nanovg_agge.o(i._Z23aggenvg__renderViewportPvfff) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e3]">aggenvg__renderFindTexture(void*, const void*)</a> from nanovg_agge.o(i._Z26aggenvg__renderFindTexturePvPKv) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e4]">aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*)</a> from nanovg_agge.o(i._Z28aggenvg__renderCreateTexturePviiiiiPKh) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e5]">aggenvg__renderDeleteTexture(void*, int)</a> from nanovg_agge.o(i._Z28aggenvg__renderDeleteTexturePvi) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e6]">aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)</a> from nanovg_agge.o(i._Z28aggenvg__renderUpdateTexturePviiiiiPKh) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[e7]">aggenvg__renderGetTextureSize(void*, int, int*, int*)</a> from nanovg_agge.o(i._Z29aggenvg__renderGetTextureSizePviPiS0_) referenced from nanovg_agge.o(i.nvgCreateAGGE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
 <LI><a href="#[ec]">agge::pixel32_rgba::pixel32_rgba()</a> from nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev) referenced from nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
 <LI><a href="#[12c]">agge::caps::butt::~butt__deallocating()</a> from stroke_features.o(i._ZN4agge4caps4buttD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[12b]">agge::caps::butt::~butt()</a> from stroke_features.o(i._ZN4agge4caps4buttD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[12f]">agge::caps::round::~round__deallocating()</a> from stroke_features.o(i._ZN4agge4caps5roundD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
 <LI><a href="#[12e]">agge::caps::round::~round()</a> from stroke_features.o(i._ZN4agge4caps5roundD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
 <LI><a href="#[132]">agge::caps::square::~square__deallocating()</a> from stroke_features.o(i._ZN4agge4caps6squareD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
 <LI><a href="#[131]">agge::caps::square::~square()</a> from stroke_features.o(i._ZN4agge4caps6squareD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
 <LI><a href="#[135]">agge::joins::bevel::~bevel__deallocating()</a> from stroke_features.o(i._ZN4agge5joins5bevelD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[134]">agge::joins::bevel::~bevel()</a> from stroke_features.o(i._ZN4agge5joins5bevelD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[138]">agge::joins::miter::~miter__deallocating()</a> from stroke_features.o(i._ZN4agge5joins5miterD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
 <LI><a href="#[137]">agge::joins::miter::~miter()</a> from stroke_features.o(i._ZN4agge5joins5miterD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
 <LI><a href="#[13b]">agge::joins::round::~round__deallocating()</a> from stroke_features.o(i._ZN4agge5joins5roundD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
 <LI><a href="#[13a]">agge::joins::round::~round()</a> from stroke_features.o(i._ZN4agge5joins5roundD1Ev) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
 <LI><a href="#[13d]">agge::stroke::cap::~cap__deallocating()</a> from stroke_features.o(i._ZN4agge6stroke3capD0Ev) referenced from stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
 <LI><a href="#[13f]">agge::stroke::join::~join__deallocating()</a> from nanovg_agge.o(i._ZN4agge6stroke4joinD0Ev) referenced from nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
 <LI><a href="#[12d]">agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge4caps4butt4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
 <LI><a href="#[130]">agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge4caps5round4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
 <LI><a href="#[133]">agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge4caps6square4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
 <LI><a href="#[136]">agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge5joins5bevel4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
 <LI><a href="#[139]">agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge5joins5miter4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
 <LI><a href="#[13c]">agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</a> from stroke_features.o(i._ZNK4agge5joins5round4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_) referenced from stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
 <LI><a href="#[13e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
 <LI><a href="#[13e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
 <LI><a href="#[141]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[140]">__sti___8_math_cpp_059a9964</a> from math.o(i.__sti___8_math_cpp_059a9964) referenced from math.o(.init_array)
 <LI><a href="#[bf]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[c1]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[c0]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[10]">delay_ms</a> from delay.o(i.delay_ms) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[11]">delay_us</a> from delay.o(i.delay_us) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c2]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[129]">graphic_buffer_default_attach</a> from graphic_buffer_default.o(i.graphic_buffer_default_attach) referenced from graphic_buffer_default.o(.constdata)
 <LI><a href="#[12a]">graphic_buffer_default_destroy</a> from graphic_buffer_default.o(i.graphic_buffer_default_destroy) referenced from graphic_buffer_default.o(.constdata)
 <LI><a href="#[126]">graphic_buffer_default_lock_for_read</a> from graphic_buffer_default.o(i.graphic_buffer_default_lock_for_read) referenced from graphic_buffer_default.o(.constdata)
 <LI><a href="#[127]">graphic_buffer_default_lock_for_write</a> from graphic_buffer_default.o(i.graphic_buffer_default_lock_for_write) referenced from graphic_buffer_default.o(.constdata)
 <LI><a href="#[128]">graphic_buffer_default_unlock</a> from graphic_buffer_default.o(i.graphic_buffer_default_unlock) referenced from graphic_buffer_default.o(.constdata)
 <LI><a href="#[d0]">lcd_mem_begin_frame</a> from lcd_mem_bgr565.o(i.lcd_mem_begin_frame) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[dd]">lcd_mem_destroy</a> from lcd_mem_bgr565.o(i.lcd_mem_destroy) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d6]">lcd_mem_draw_glyph</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_glyph) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d2]">lcd_mem_draw_hline</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_hline) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d4]">lcd_mem_draw_image</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_image) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d5]">lcd_mem_draw_image_matrix</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_image_matrix) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d7]">lcd_mem_draw_points</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_points) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d1]">lcd_mem_draw_vline</a> from lcd_mem_bgr565.o(i.lcd_mem_draw_vline) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[dc]">lcd_mem_end_frame</a> from lcd_mem_bgr565.o(i.lcd_mem_end_frame) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d3]">lcd_mem_fill_rect</a> from lcd_mem_bgr565.o(i.lcd_mem_fill_rect) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[df]">lcd_mem_flush</a> from lcd_mem_bgr565.o(i.lcd_mem_flush) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[db]">lcd_mem_get_desired_bitmap_format</a> from lcd_mem_bgr565.o(i.lcd_mem_get_desired_bitmap_format) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d8]">lcd_mem_get_point_color</a> from lcd_mem_bgr565.o(i.lcd_mem_get_point_color) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[d9]">lcd_mem_get_vgcanvas</a> from lcd_mem_bgr565.o(i.lcd_mem_get_vgcanvas) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[de]">lcd_mem_resize</a> from lcd_mem_bgr565.o(i.lcd_mem_resize) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[da]">lcd_mem_take_snapshot</a> from lcd_mem_bgr565.o(i.lcd_mem_take_snapshot) referenced from lcd_mem_bgr565.o(i.lcd_mem_create)
 <LI><a href="#[c]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[d]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[e]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[ee]">system_info_get_prop</a> from system_info.o(i.system_info_get_prop) referenced from system_info.o(.constdata)
 <LI><a href="#[ed]">system_info_on_destroy</a> from system_info.o(i.system_info_on_destroy) referenced from system_info.o(.constdata)
 <LI><a href="#[16]">test_copypageandwrite</a> from nandtester.o(i.test_copypageandwrite) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1c]">test_ftlreadsectors</a> from nandtester.o(i.test_ftlreadsectors) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1b]">test_ftlwritesectors</a> from nandtester.o(i.test_ftlwritesectors) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1a]">test_readallblockinfo</a> from nandtester.o(i.test_readallblockinfo) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[17]">test_readpage</a> from nandtester.o(i.test_readpage) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[19]">test_readspare</a> from nandtester.o(i.test_readspare) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[18]">test_writepage</a> from nandtester.o(i.test_writepage) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[26]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[27]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[25]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[28]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[f7]">vgcanvas_nanovg_arc</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f8]">vgcanvas_nanovg_arc_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f0]">vgcanvas_nanovg_begin_frame</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_frame) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f4]">vgcanvas_nanovg_begin_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f9]">vgcanvas_nanovg_bezier_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bezier_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[122]">vgcanvas_nanovg_bind_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bind_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f3]">vgcanvas_nanovg_clear_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clear_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[105]">vgcanvas_nanovg_clip_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clip_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[fe]">vgcanvas_nanovg_close_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_close_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[120]">vgcanvas_nanovg_create_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_create_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[125]">vgcanvas_nanovg_destroy</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[121]">vgcanvas_nanovg_destroy_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[110]">vgcanvas_nanovg_draw_image</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_draw_image) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[fc]">vgcanvas_nanovg_ellipse</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ellipse) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11f]">vgcanvas_nanovg_end_frame</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_end_frame) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[124]">vgcanvas_nanovg_fbo_to_bitmap</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fbo_to_bitmap) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[107]">vgcanvas_nanovg_fill</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10e]">vgcanvas_nanovg_fill_text</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill_text) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f2]">vgcanvas_nanovg_flush</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_flush) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[106]">vgcanvas_nanovg_intersect_clip_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_intersect_clip_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[fb]">vgcanvas_nanovg_is_point_in_path</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_is_point_in_path) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f6]">vgcanvas_nanovg_line_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_line_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10f]">vgcanvas_nanovg_measure_text</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_measure_text) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f5]">vgcanvas_nanovg_move_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_move_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[109]">vgcanvas_nanovg_paint</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_paint) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[ff]">vgcanvas_nanovg_path_winding</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_path_winding) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[fa]">vgcanvas_nanovg_quad_to</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_quad_to) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[ef]">vgcanvas_nanovg_reinit</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reinit) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f1]">vgcanvas_nanovg_reset</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reset) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11e]">vgcanvas_nanovg_restore</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_restore) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[101]">vgcanvas_nanovg_rotate</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rotate) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[fd]">vgcanvas_nanovg_rounded_rect</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rounded_rect) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11d]">vgcanvas_nanovg_save</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_save) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[100]">vgcanvas_nanovg_scale</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_scale) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[111]">vgcanvas_nanovg_set_antialias</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_antialias) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[114]">vgcanvas_nanovg_set_fill_color</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_color) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[115]">vgcanvas_nanovg_set_fill_linear_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_linear_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[116]">vgcanvas_nanovg_set_fill_radial_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_radial_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10a]">vgcanvas_nanovg_set_font</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10b]">vgcanvas_nanovg_set_font_size</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font_size) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[112]">vgcanvas_nanovg_set_global_alpha</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_global_alpha) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11b]">vgcanvas_nanovg_set_line_cap</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_cap) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11a]">vgcanvas_nanovg_set_line_join</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_join) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[113]">vgcanvas_nanovg_set_line_width</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_width) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[11c]">vgcanvas_nanovg_set_miter_limit</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_miter_limit) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[117]">vgcanvas_nanovg_set_stroke_color</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_color) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[118]">vgcanvas_nanovg_set_stroke_linear_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_linear_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[119]">vgcanvas_nanovg_set_stroke_radial_gradient</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_radial_gradient) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10c]">vgcanvas_nanovg_set_text_align</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_align) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[10d]">vgcanvas_nanovg_set_text_baseline</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_baseline) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[104]">vgcanvas_nanovg_set_transform</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_transform) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[108]">vgcanvas_nanovg_stroke</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_stroke) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[103]">vgcanvas_nanovg_transform</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_transform) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[102]">vgcanvas_nanovg_translate</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_translate) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[123]">vgcanvas_nanovg_unbind_fbo</a> from vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_unbind_fbo) referenced from vgcanvas_nanovg_soft.o(.constdata)
 <LI><a href="#[f]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[141]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[143]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[145]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[609]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[60a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[60b]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[60c]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[60d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[146]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[18c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[148]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[14a]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[14d]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[60e]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[60f]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[14e]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[150]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[151]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[154]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[156]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[158]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[159]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[15a]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[15c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[610]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[15e]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[160]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[162]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[164]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[611]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[171]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[166]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[612]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[168]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[613]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[614]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[615]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[616]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[617]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[618]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[619]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[61a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[61b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[61c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[61d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[61e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[61f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[620]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[621]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[622]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[623]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[624]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[625]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[176]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[626]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[627]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[628]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[629]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[62a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[62b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[62c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[144]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[62d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[170]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[62e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[172]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_Init &rArr; LTDC_Init &rArr; LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[62f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1ab]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[175]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[630]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[177]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[29]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[179]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[631]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[632]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[633]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
</UL>

<P><STRONG><a name="[17a]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[17c]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[17d]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
</UL>

<P><STRONG><a name="[180]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseChip
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BlockCompare
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readspare
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readpage
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readallblockinfo
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlreadsectors
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ECC_Correction
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[183]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[184]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[182]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[157]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[189]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[155]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[15d]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[149]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[18a]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2d4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[486]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[44c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
</UL>

<P><STRONG><a name="[18d]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtype_from_extname
</UL>

<P><STRONG><a name="[2cf]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_file
</UL>

<P><STRONG><a name="[42d]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_append
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_build
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_image
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
</UL>

<P><STRONG><a name="[2d2]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_impl
</UL>

<P><STRONG><a name="[42e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_append
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_build
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>

<P><STRONG><a name="[18e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[634]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyReverse
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[635]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[636]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[637]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_build
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[190]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[638]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_create
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__deleteTexture(AGGENVGcontext*, int)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
</UL>

<P><STRONG><a name="[639]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[63a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[192]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_create
</UL>

<P><STRONG><a name="[2c4]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_find_in_cache
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_impl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[63b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[63d]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[63e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[63f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[188]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[194]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[196]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[185]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[186]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[187]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[147]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[17e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[17f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[c0]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[161]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[181]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[199]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[19b]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[153]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[15b]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[19c]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[640]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[163]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[165]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[198]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[19a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[19e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[19d]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[16f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[174]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a8]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[1ac]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[641]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[642]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[643]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ae]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1ad]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1af]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1b0]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a2]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>Cache_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys.o(i.Cache_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cache_Enable &rArr; SCB_EnableDCache
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>FMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_NAND_AttributeSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NAND_AttributeSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[1d4]"></a>FMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_NAND_CommonSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NAND_CommonSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[1d3]"></a>FMC_NAND_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_ll_fmc.o(i.FMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[1f8]"></a>FMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(i.FMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1f6]"></a>FMC_NORSRAM_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32h7xx_ll_fmc.o(i.FMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1f7]"></a>FMC_NORSRAM_Timing_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[1ee]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1f1]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[1f3]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[1ef]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1b5]"></a>FTL_BadBlockMark</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ftl.o(i.FTL_BadBlockMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTL_BadBlockMark &rArr; NAND_WriteSpare &rArr; NAND_WritePage &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>

<P><STRONG><a name="[1b7]"></a>FTL_BlockCompare</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ftl.o(i.FTL_BlockCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FTL_BlockCompare &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePageConst
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPageComp
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
</UL>

<P><STRONG><a name="[1e]"></a>FTL_CheckBadBlock</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ftl.o(i.FTL_CheckBadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = FTL_CheckBadBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1bb]"></a>FTL_CopyAndWriteToBlock</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, ftl.o(i.FTL_CopyAndWriteToBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = FTL_CopyAndWriteToBlock &rArr; FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithoutWrite
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithWrite
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_UsedBlockMark
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_FindSamePlaneUnusedBlock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BadBlockMark
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
</UL>

<P><STRONG><a name="[23]"></a>FTL_CreateLUT</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ftl.o(i.FTL_CreateLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FTL_CreateLUT &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>FTL_FindSamePlaneUnusedBlock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ftl.o(i.FTL_FindSamePlaneUnusedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_FindUnusedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>FTL_FindUnusedBlock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ftl.o(i.FTL_FindUnusedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_FindSamePlaneUnusedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>FTL_Format</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ftl.o(i.FTL_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FTL_Format &rArr; FTL_CreateLUT &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteSpare
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CheckBadBlock
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BadBlockMark
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>FTL_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ftl.o(i.FTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FTL_Init &rArr; FTL_Format &rArr; FTL_CreateLUT &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>FTL_LBNToPBN</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ftl.o(i.FTL_LBNToPBN))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1c0]"></a>FTL_ReadSectors</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, ftl.o(i.FTL_ReadSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = FTL_ReadSectors &rArr; FTL_CopyAndWriteToBlock &rArr; FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_LBNToPBN
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BlockCompare
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BadBlockMark
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlreadsectors
</UL>

<P><STRONG><a name="[1f]"></a>FTL_UsedBlockMark</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftl.o(i.FTL_UsedBlockMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTL_UsedBlockMark &rArr; NAND_WriteSpare &rArr; NAND_WritePage &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>FTL_WriteSectors</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, ftl.o(i.FTL_WriteSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = FTL_WriteSectors &rArr; FTL_CopyAndWriteToBlock &rArr; FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPageComp
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_UsedBlockMark
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_LBNToPBN
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlwritesectors
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_GPIO_Init</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_PanelID_Read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
</UL>

<P><STRONG><a name="[225]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_PanelID_Read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitRB
</UL>

<P><STRONG><a name="[21b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Parameter_Config
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_LTDC_Init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_LTDC_SetWindowSize</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
</UL>

<P><STRONG><a name="[21d]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MPU_Config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MPU_Config
</UL>

<P><STRONG><a name="[21c]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MPU_Config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MPU_Config
</UL>

<P><STRONG><a name="[21e]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MPU_Config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MPU_Config
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_NAND_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_nand.o(i.HAL_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_NAND_Init &rArr; HAL_NAND_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_CommonSpace_Timing_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NAND_AttributeSpace_Timing_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_NAND_MspInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, nand.o(i.HAL_NAND_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_NAND_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[209]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_QSPI_Command</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_QSPI_Init</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>

<P><STRONG><a name="[1de]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD1SysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[23f]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[240]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2868 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clk_Set
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 574 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1724 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Send_Cmd
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_SRAM_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32h7xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Timing_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lcd.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[440]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[23b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[201]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[241]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[205]"></a>HAL_UART_MspInit</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[242]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[23e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[23d]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[2b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>KEY_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KEY_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>LCD_Clear</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LTDC_Clear &rArr; LTDC_Fill
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clear
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[20f]"></a>LCD_Display_Dir</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Display_Dir
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[212]"></a>LCD_Init</STRONG> (Thumb, 9292 bytes, Stack size 88 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; LTDC_Init &rArr; LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NORSRAM_Extended_Timing_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_PanelID_Read
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MPU_Config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[215]"></a>LCD_MPU_Config</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd.o(i.LCD_MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[217]"></a>LCD_RD_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[21a]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SSD_BackLightSet &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[211]"></a>LCD_Scan_Dir</STRONG> (Thumb, 624 bytes, Stack size 20 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[20d]"></a>LCD_SetCursor</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[218]"></a>LCD_WR_DATA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[216]"></a>LCD_WR_REG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[20e]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[219]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>

<P><STRONG><a name="[21f]"></a>LED_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20c]"></a>LTDC_Clear</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ltdc.o(i.LTDC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_Clear &rArr; LTDC_Fill
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[221]"></a>LTDC_Clk_Set</STRONG> (Thumb, 46 bytes, Stack size 208 bytes, ltdc.o(i.LTDC_Clk_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[210]"></a>LTDC_Display_Dir</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ltdc.o(i.LTDC_Display_Dir))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[220]"></a>LTDC_Fill</STRONG> (Thumb, 310 bytes, Stack size 36 bytes, ltdc.o(i.LTDC_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LTDC_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clear
</UL>

<P><STRONG><a name="[214]"></a>LTDC_Init</STRONG> (Thumb, 990 bytes, Stack size 24 bytes, ltdc.o(i.LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LTDC_Init &rArr; LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Display_Dir
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Select_Layer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Window_Config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Layer_Parameter_Config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clk_Set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_PanelID_Read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[222]"></a>LTDC_Layer_Parameter_Config</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, ltdc.o(i.LTDC_Layer_Parameter_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LTDC_Layer_Parameter_Config &rArr; HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[223]"></a>LTDC_Layer_Window_Config</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ltdc.o(i.LTDC_Layer_Window_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LTDC_Layer_Window_Config &rArr; HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[213]"></a>LTDC_PanelID_Read</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ltdc.o(i.LTDC_PanelID_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LTDC_PanelID_Read &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[224]"></a>LTDC_Select_Layer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ltdc.o(i.LTDC_Select_Layer))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[226]"></a>MPU_Memory_Protection</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mpu.o(i.MPU_Memory_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Memory_Protection &rArr; MPU_Set_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Protection
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>MPU_Set_Protection</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, mpu.o(i.MPU_Set_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Set_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Memory_Protection
</UL>

<P><STRONG><a name="[1bc]"></a>NAND_CopyPageWithWrite</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, nand.o(i.NAND_CopyPageWithWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAND_CopyPageWithWrite &rArr; NAND_WaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitRB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_copypageandwrite
</UL>

<P><STRONG><a name="[15]"></a>NAND_CopyPageWithoutWrite</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, nand.o(i.NAND_CopyPageWithoutWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NAND_CopyPageWithoutWrite &rArr; NAND_WaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitRB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[229]"></a>NAND_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nand.o(i.NAND_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NAND_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePageConst
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePage
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithWrite
</UL>

<P><STRONG><a name="[22b]"></a>NAND_ECC_Correction</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, nand.o(i.NAND_ECC_Correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ECC_Get_OE
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
</UL>

<P><STRONG><a name="[22c]"></a>NAND_ECC_Get_OE</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, nand.o(i.NAND_ECC_Get_OE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NAND_ECC_Get_OE
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ECC_Correction
</UL>

<P><STRONG><a name="[13]"></a>NAND_EraseBlock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nand.o(i.NAND_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAND_EraseBlock &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseChip
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CopyAndWriteToBlock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BlockCompare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>NAND_EraseChip</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nand.o(i.NAND_EraseChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = NAND_EraseChip &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1bd]"></a>NAND_Init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, nand.o(i.NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = NAND_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Reset
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadID
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ModeSet
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_MPU_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
</UL>

<P><STRONG><a name="[22d]"></a>NAND_MPU_Config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nand.o(i.NAND_MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAND_MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[12]"></a>NAND_ModeSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nand.o(i.NAND_ModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAND_ModeSet &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[22f]"></a>NAND_ReadID</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, nand.o(i.NAND_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NAND_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[1c1]"></a>NAND_ReadPage</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, nand.o(i.NAND_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitRB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ECC_Correction
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Delay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readpage
</UL>

<P><STRONG><a name="[1b8]"></a>NAND_ReadPageComp</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nand.o(i.NAND_ReadPageComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NAND_ReadPageComp &rArr; NAND_WaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitRB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BlockCompare
</UL>

<P><STRONG><a name="[1ba]"></a>NAND_ReadSpare</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nand.o(i.NAND_ReadSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_FindUnusedBlock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CreateLUT
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_CheckBadBlock
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readspare
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readallblockinfo
</UL>

<P><STRONG><a name="[230]"></a>NAND_ReadStatus</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nand.o(i.NAND_ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>

<P><STRONG><a name="[22e]"></a>NAND_Reset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, nand.o(i.NAND_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NAND_Reset &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>

<P><STRONG><a name="[22a]"></a>NAND_WaitForReady</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nand.o(i.NAND_WaitForReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePageConst
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPageComp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EraseBlock
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithoutWrite
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithWrite
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Reset
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ModeSet
</UL>

<P><STRONG><a name="[228]"></a>NAND_WaitRB</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nand.o(i.NAND_WaitRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NAND_WaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPageComp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithoutWrite
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithWrite
</UL>

<P><STRONG><a name="[1c3]"></a>NAND_WritePage</STRONG> (Thumb, 370 bytes, Stack size 36 bytes, nand.o(i.NAND_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NAND_WritePage &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WriteSpare
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_writepage
</UL>

<P><STRONG><a name="[1b9]"></a>NAND_WritePageConst</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nand.o(i.NAND_WritePageConst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NAND_WritePageConst &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WaitForReady
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BlockCompare
</UL>

<P><STRONG><a name="[1b6]"></a>NAND_WriteSpare</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, nand.o(i.NAND_WriteSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NAND_WriteSpare &rArr; NAND_WritePage &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_UsedBlockMark
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Format
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_BadBlockMark
</UL>

<P><STRONG><a name="[2a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[231]"></a>QSPI_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, qspi.o(i.QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QSPI_Init &rArr; HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[232]"></a>QSPI_Receive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qspi.o(i.QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QSPI_Receive &rArr; HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>

<P><STRONG><a name="[233]"></a>QSPI_Send_CMD</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, qspi.o(i.QSPI_Send_CMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_SR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Qspi_Enable
</UL>

<P><STRONG><a name="[234]"></a>QSPI_Transmit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qspi.o(i.QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QSPI_Transmit &rArr; HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_SR
</UL>

<P><STRONG><a name="[235]"></a>SDRAM_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdram.o(i.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SDRAM_Init &rArr; SDRAM_Initialization_Sequence &rArr; SDRAM_Send_Cmd &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sdram.o(i.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; SDRAM_Send_Cmd &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[237]"></a>SDRAM_Send_Cmd</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, sdram.o(i.SDRAM_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SDRAM_Send_Cmd &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[2f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>Stm32_Clock_Init</STRONG> (Thumb, 238 bytes, Stack size 136 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_tick_handler.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>TIM4_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usmart.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[23a]"></a>Timer4_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usmart.o(i.Timer4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer4_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[207]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[208]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[206]"></a>UART_SetConfig</STRONG> (Thumb, 2452 bytes, Stack size 72 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23c]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[58]"></a>USART1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[243]"></a>W25QXX_Init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = W25QXX_Init &rArr; W25QXX_Qspi_Enable &rArr; W25QXX_Write_SR &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Qspi_Enable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[244]"></a>W25QXX_Qspi_Enable</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Qspi_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25QXX_Qspi_Enable &rArr; W25QXX_Write_SR &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_SR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[245]"></a>W25QXX_ReadID</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25QXX_ReadID &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[246]"></a>W25QXX_ReadSR</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25QXX_ReadSR &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Qspi_Enable
</UL>

<P><STRONG><a name="[247]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25QXX_Write_Enable &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Qspi_Enable
</UL>

<P><STRONG><a name="[248]"></a>W25QXX_Write_SR</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_Write_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25QXX_Write_SR &rArr; QSPI_Send_CMD &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Transmit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Send_CMD
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Qspi_Enable
</UL>

<P><STRONG><a name="[262]"></a>AGGENVGcontext::AGGENVGcontext()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::bevel()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::butt()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[644]"></a>AGGENVGcontext::AGGENVGcontext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextC1Ev), UNUSED)

<P><STRONG><a name="[25e]"></a>AGGENVGcontext::~AGGENVGcontext()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AGGENVGcontext::~AGGENVGcontext() &rArr; agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::~stroke()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::~pod_vector()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDelete(void*)
</UL>

<P><STRONG><a name="[645]"></a>AGGENVGcontext::~AGGENVGcontext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN14AGGENVGcontextD1Ev), UNUSED)

<P><STRONG><a name="[548]"></a>agge::raw_bitmap::row_ptr(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmap7row_ptrEj))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>

<P><STRONG><a name="[476]"></a>agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmapC1EjjjNS_14bits_per_pixelEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[646]"></a>agge::raw_bitmap::raw_bitmap__sub_object(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge10raw_bitmapC1EjjjNS_14bits_per_pixelEPh), UNUSED)

<P><STRONG><a name="[58b]"></a>void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_11pixel24_bgrENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[599]"></a>void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_11pixel24_rgbENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a7]"></a>void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_12pixel32_bgraENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5b5]"></a>void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_12pixel32_rgbaES1_EEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5c3]"></a>void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_14pixel16_bgr565ENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5d1]"></a>void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, nanovg_agge.o(i._ZN4agge11pixel_blendINS_14pixel16_rgb565ENS_12pixel32_rgbaEEEvRT_RKT0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[24c]"></a>agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[647]"></a>agge::pixel32_rgba::pixel32_rgba__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ehhhh), UNUSED)

<P><STRONG><a name="[ec]"></a>agge::pixel32_rgba::pixel32_rgba()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev))
<BR>[Address Reference Count : 24]<UL><LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_)
<LI> nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_)
</UL>
<P><STRONG><a name="[648]"></a>agge::pixel32_rgba::pixel32_rgba__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge12pixel32_rgbaC1Ev), UNUSED)

<P><STRONG><a name="[544]"></a>agge::nanovg_vertex::iterator::vertex(float*, float*)</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iterator6vertexEPfS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::nanovg_vertex::iterator::vertex(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[4b5]"></a>agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iteratorC1EP9NVGvertexi))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[649]"></a>agge::nanovg_vertex::iterator::iterator__sub_object(NVGvertex*, int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_vertex.o(i._ZN4agge13nanovg_vertex8iteratorC1EP9NVGvertexi), UNUSED)

<P><STRONG><a name="[5d8]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_12pixel32_bgraEEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5dc]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_14pixel16_bgr565EEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5da]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge13pixel_convertINS_12pixel32_rgbaES1_EEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[27b]"></a>agge::precise_delta::next()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge13precise_delta4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[27a]"></a>agge::precise_delta::multiply(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge13precise_delta8multiplyEi))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[275]"></a>agge::precise_delta::precise_delta(int, int)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vector_rasterizer.o(i._ZN4agge13precise_deltaC1Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::precise_delta::precise_delta(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[64a]"></a>agge::precise_delta::precise_delta__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, vector_rasterizer.o(i._ZN4agge13precise_deltaC1Eii), UNUSED)

<P><STRONG><a name="[26a]"></a>agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge15vertex_sequence12set_distanceERNS_6vertexERKNS_5pointIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>

<P><STRONG><a name="[26c]"></a>agge::vector_rasterizer::extend_bounds(int, int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer13extend_boundsEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::vector_rasterizer::extend_bounds(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_min&lang;int&rang;(T1&, T1)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_max&lang;int&rang;(T1&, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[26f]"></a>agge::vector_rasterizer::line(int, int, int, int)</STRONG> (Thumb, 540 bytes, Stack size 144 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer4lineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::precise_delta(int, int)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::multiply(int)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::next()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
</UL>

<P><STRONG><a name="[27c]"></a>agge::vector_rasterizer::sort(bool)</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer4sortEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::vector_rasterizer::sort(bool) &rArr; agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::operator [](unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::end()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[276]"></a>agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer5hlineERPNS0_4cellERNS_13precise_deltaEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::multiply(int)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::precise_delta::next()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[24f]"></a>agge::vector_rasterizer::reset()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizer5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[264]"></a>agge::vector_rasterizer::vector_rasterizer()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[64b]"></a>agge::vector_rasterizer::vector_rasterizer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge17vector_rasterizerC1Ev), UNUSED)

<P><STRONG><a name="[287]"></a>agge::cos(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, math.o(i._ZN4agge3cosEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = agge::cos(float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[289]"></a>agge::sin(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, math.o(i._ZN4agge3sinEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = agge::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[251]"></a>agge::caps::butt::butt()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge4caps4buttC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::caps::butt::butt()
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::cap__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[64c]"></a>agge::caps::butt::butt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge4caps4buttC1Ev), UNUSED)

<P><STRONG><a name="[12c]"></a>agge::caps::butt::~butt__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge4caps4buttD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::caps::butt::~butt__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[12b]"></a>agge::caps::butt::~butt()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps4buttD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt__deallocating()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[64d]"></a>agge::caps::butt::~butt__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps4buttD1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>agge::caps::round::~round__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge4caps5roundD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::caps::round::~round__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::~round()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
</UL>
<P><STRONG><a name="[12e]"></a>agge::caps::round::~round()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps5roundD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::~round__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
</UL>
<P><STRONG><a name="[64e]"></a>agge::caps::round::~round__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps5roundD1Ev), UNUSED)

<P><STRONG><a name="[132]"></a>agge::caps::square::~square__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge4caps6squareD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::caps::square::~square__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::~square()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
</UL>
<P><STRONG><a name="[131]"></a>agge::caps::square::~square()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps6squareD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::~square__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
</UL>
<P><STRONG><a name="[64f]"></a>agge::caps::square::~square__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge4caps6squareD1Ev), UNUSED)

<P><STRONG><a name="[26b]"></a>agge::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, math.o(i._ZN4agge4sqrtEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_lines_midpoint(const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float&, float&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[28c]"></a>agge::joins::get_lines_midpoint(const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float&, float&)</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, stroke_features.o(i._ZN4agge5joins18get_lines_midpointERKNS_5pointIfEEfS4_fS4_RfS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::joins::get_lines_midpoint(const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float&, float&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[28d]"></a>agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&)</STRONG> (Thumb, 696 bytes, Stack size 96 bytes, stroke_features.o(i._ZN4agge5joins18get_new_edge_pointERKNS_5pointIfEES4_S4_fffffRfS5_Rb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[258]"></a>agge::joins::bevel::bevel()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge5joins5bevelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::joins::bevel::bevel()
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::join__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[650]"></a>agge::joins::bevel::bevel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(i._ZN4agge5joins5bevelC1Ev), UNUSED)

<P><STRONG><a name="[135]"></a>agge::joins::bevel::~bevel__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge5joins5bevelD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::joins::bevel::~bevel__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[134]"></a>agge::joins::bevel::~bevel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5bevelD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel__deallocating()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[651]"></a>agge::joins::bevel::~bevel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5bevelD1Ev), UNUSED)

<P><STRONG><a name="[138]"></a>agge::joins::miter::~miter__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge5joins5miterD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::joins::miter::~miter__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::~miter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
</UL>
<P><STRONG><a name="[137]"></a>agge::joins::miter::~miter()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5miterD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::~miter__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
</UL>
<P><STRONG><a name="[652]"></a>agge::joins::miter::~miter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5miterD1Ev), UNUSED)

<P><STRONG><a name="[13b]"></a>agge::joins::round::~round__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge5joins5roundD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::joins::round::~round__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::~round()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
</UL>
<P><STRONG><a name="[13a]"></a>agge::joins::round::~round()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5roundD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::~round__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
</UL>
<P><STRONG><a name="[653]"></a>agge::joins::round::~round__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stroke_features.o(i._ZN4agge5joins5roundD1Ev), UNUSED)

<P><STRONG><a name="[477]"></a>agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_bgrENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[654]"></a>agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_bgrENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[485]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[655]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[47f]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[656]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[47c]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[657]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[482]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[658]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[4ab]"></a>agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::~bitmap()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[659]"></a>agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::~bitmap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEED1Ev), UNUSED)

<P><STRONG><a name="[29f]"></a>agge::iround(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6iroundEf))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>

<P><STRONG><a name="[28f]"></a>agge::muldiv(int, int, int)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN4agge6muldivEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::muldiv(int, int, int) &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>

<P><STRONG><a name="[291]"></a>agge::stroke::add_vertex(float, float, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stroke.o(i._ZN4agge6stroke10add_vertexEffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = agge::stroke::add_vertex(float, float, int) &rArr; void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[546]"></a>agge::stroke::remove_all()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke10remove_allEv))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[293]"></a>agge::stroke::close_polygon()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stroke.o(i._ZN4agge6stroke13close_polygonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::stroke::close_polygon() &rArr; agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::empty() const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>

<P><STRONG><a name="[255]"></a>agge::stroke::cap::cap__sub_object(const agge::stroke::cap&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6stroke3capC2ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&)
</UL>

<P><STRONG><a name="[253]"></a>agge::stroke::cap::cap__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6stroke3capC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::butt()
</UL>

<P><STRONG><a name="[13d]"></a>agge::stroke::cap::~cap__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stroke_features.o(i._ZN4agge6stroke3capD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::cap::~cap__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
</UL>
<P><STRONG><a name="[257]"></a>agge::stroke::join::join__sub_object(const agge::stroke::join&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6stroke4joinC2ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&)
</UL>

<P><STRONG><a name="[256]"></a>agge::stroke::join::join__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge6stroke4joinC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::bevel()
</UL>

<P><STRONG><a name="[13f]"></a>agge::stroke::join::~join__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZN4agge6stroke4joinD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::join::~join__deallocating() &rArr; operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
</UL>
<P><STRONG><a name="[4b4]"></a>agge::stroke::width(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke5widthEf))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[295]"></a>agge::stroke::vertex(float*, float*)</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, stroke.o(i._ZN4agge6stroke6vertexEPfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::stroke::vertex(float*, float*) &rArr; agge::stroke::prepare()
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::set_state(int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[298]"></a>agge::stroke::prepare()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stroke.o(i._ZN4agge6stroke7prepareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::stroke::prepare()
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::size() const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::set_state(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[297]"></a>agge::stroke::set_state(int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stroke.o(i._ZN4agge6stroke9set_stateEi))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[263]"></a>agge::stroke::stroke()</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge6strokeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::stroke::stroke() &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::capacity() const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[65a]"></a>agge::stroke::stroke__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, stroke.o(i._ZN4agge6strokeC1Ev), UNUSED)

<P><STRONG><a name="[268]"></a>agge::stroke::~stroke()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stroke.o(i._ZN4agge6strokeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[65b]"></a>agge::stroke::~stroke__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, stroke.o(i._ZN4agge6strokeD1Ev), UNUSED)

<P><STRONG><a name="[5d6]"></a>unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZN4agge7pixel_aINS_12pixel32_rgbaEEEhRKT_h))
<BR><BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[29e]"></a>agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZN4agge7scalingIiE6scale1EffRiS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::iround(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
</UL>

<P><STRONG><a name="[479]"></a>agge::raw_bitmap::width() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge10raw_bitmap5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[47a]"></a>agge::raw_bitmap::height() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge10raw_bitmap6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[27d]"></a>agge::vector_rasterizer::empty() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[54f]"></a>agge::vector_rasterizer::min_y() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg_agge.o(i._ZNK4agge17vector_rasterizer5min_yEv))
<BR><BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[270]"></a>agge::vector_rasterizer::width() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer5widthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::vector_rasterizer::width() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[271]"></a>agge::vector_rasterizer::height() const</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZNK4agge17vector_rasterizer6heightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::vector_rasterizer::height() const
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[550]"></a>agge::vector_rasterizer::operator [](int) const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nanovg_agge.o(i._ZNK4agge17vector_rasterizerixEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::vector_rasterizer::operator [](int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[12d]"></a>agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, stroke_features.o(i._ZNK4agge4caps4butt4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps4buttE)
</UL>
<P><STRONG><a name="[130]"></a>agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, stroke_features.o(i._ZNK4agge4caps5round4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan(float)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sin(float)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::cos(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps5roundE)
</UL>
<P><STRONG><a name="[133]"></a>agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 514 bytes, Stack size 88 bytes, stroke_features.o(i._ZNK4agge4caps6square4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge4caps6squareE)
</UL>
<P><STRONG><a name="[136]"></a>agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, stroke_features.o(i._ZNK4agge5joins5bevel4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5bevelE)
</UL>
<P><STRONG><a name="[139]"></a>agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 888 bytes, Stack size 152 bytes, stroke_features.o(i._ZNK4agge5joins5miter4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&) &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_lines_midpoint(const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float&, float&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5miterE)
</UL>
<P><STRONG><a name="[13c]"></a>agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const</STRONG> (Thumb, 766 bytes, Stack size 128 bytes, stroke_features.o(i._ZNK4agge5joins5round4calcERNS_10pod_vectorINS_5pointIfEEEEfRKS4_fS8_fS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan(float)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_lines_midpoint(const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float&, float&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sin(float)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::cos(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stroke_features.o(.constdata__ZTVN4agge5joins5roundE)
</UL>
<P><STRONG><a name="[2a2]"></a>std::atan(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stroke_features.o(i._ZSt4atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::atan(float) &rArr; __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[2a4]"></a>std::ceil(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZSt4ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ceil(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[28e]"></a>std::fabs(float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stroke_features.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::get_new_edge_point(const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, const agge::point&lang;float&rang;&, float, float, float, float, float, float&, float&, bool&)
</UL>

<P><STRONG><a name="[2a6]"></a>std::floor(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg_agge.o(i._ZSt5floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::floor(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[269]"></a>operator delete[] (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::~stroke()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::~pod_vector()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[25f]"></a>operator delete (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, new.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator delete (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDelete(void*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::~cap__deallocating()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::~round__deallocating()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::~miter__deallocating()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel__deallocating()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::~square__deallocating()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::~round__deallocating()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt__deallocating()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::~join__deallocating()
</UL>

<P><STRONG><a name="[2a9]"></a>operator new[] (unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator new[] (unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>

<P><STRONG><a name="[254]"></a>operator new(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&)
</UL>

<P><STRONG><a name="[1a5]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2b0]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[24a]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, assert.o(i.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_test
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[5d3]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[13e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stroke_features.o(.constdata__ZTVN4agge6stroke3capE)
<LI> nanovg_agge.o(.constdata__ZTVN4agge6stroke4joinE)
</UL>
<P><STRONG><a name="[2ab]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__acosf
</UL>

<P><STRONG><a name="[2af]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__atan2f
</UL>

<P><STRONG><a name="[2a3]"></a>__hardfp_atanf</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan(float)
</UL>

<P><STRONG><a name="[2a5]"></a>__hardfp_ceilf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>

<P><STRONG><a name="[65c]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[288]"></a>__hardfp_cosf</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::cos(float)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
</UL>

<P><STRONG><a name="[2a7]"></a>__hardfp_floorf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
</UL>

<P><STRONG><a name="[28a]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sin(float)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
</UL>

<P><STRONG><a name="[28b]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sqrtf
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getAverageScale
</UL>

<P><STRONG><a name="[2b4]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tanf
</UL>

<P><STRONG><a name="[2ad]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2b2]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2ae]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[2b1]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2b3]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[18b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[178]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[2b5]"></a>asset_info_create</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, asset_info.o(i.asset_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = asset_info_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
</UL>

<P><STRONG><a name="[2b6]"></a>asset_info_destroy</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, asset_info.o(i.asset_info_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_unref
</UL>

<P><STRONG><a name="[2bb]"></a>asset_info_ref</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, asset_info.o(i.asset_info_ref))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[2b7]"></a>asset_info_unref</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, asset_info.o(i.asset_info_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
</UL>

<P><STRONG><a name="[44f]"></a>asset_loader_load</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, asset_loader.o(i.asset_loader_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = asset_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_image
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_assets
</UL>

<P><STRONG><a name="[2b8]"></a>asset_type_find_by_value</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enums.o(i.asset_type_find_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = asset_type_find_by_value &rArr; find_item_by_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_item_by_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[386]"></a>assets_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, assets_manager.o(i.assets_manager))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[2ba]"></a>assets_manager_add</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = assets_manager_add &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_asset
</UL>

<P><STRONG><a name="[2bd]"></a>assets_manager_build_asset_filename</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, assets_manager.o(i.assets_manager_build_asset_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_pixel_ratio_to_str
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_default
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_custom
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_system_info
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_res_root
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_image
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_assets
</UL>

<P><STRONG><a name="[2c3]"></a>assets_manager_find_in_cache</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, assets_manager.o(i.assets_manager_find_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assets_manager_find_in_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[2c8]"></a>assets_manager_load</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
</UL>

<P><STRONG><a name="[2ca]"></a>assets_manager_load_asset</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, assets_manager.o(i.assets_manager_load_asset))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_image
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_assets
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_impl
</UL>

<P><STRONG><a name="[2cd]"></a>assets_manager_load_file</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, assets_manager.o(i.assets_manager_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = assets_manager_load_file &rArr; load_asset_from_file &rArr; asset_info_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_exist
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtype_from_extname
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_impl
</UL>

<P><STRONG><a name="[2d3]"></a>assets_manager_ref</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, assets_manager.o(i.assets_manager_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = assets_manager_ref &rArr; assets_manager_ref_impl &rArr; assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_snprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_replace_locale
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_type_find_by_value
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref_impl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_locale_info
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[2d8]"></a>assets_manager_unref</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, assets_manager.o(i.assets_manager_unref))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = assets_manager_unref &rArr; asset_info_unref &rArr; asset_info_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_unref
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[2d9]"></a>bitmap_alloc_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_alloc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bitmap_alloc_data &rArr; graphic_buffer_create_for_bitmap &rArr; graphic_buffer_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_for_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
</UL>

<P><STRONG><a name="[2dc]"></a>bitmap_get_bpp</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, bitmap.o(i.bitmap_get_bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2dd]"></a>bitmap_get_bpp_of_format</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bitmap.o(i.bitmap_get_bpp_of_format))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_resize
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
</UL>

<P><STRONG><a name="[2de]"></a>bitmap_get_line_length</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_get_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_for_bitmap
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2e0]"></a>bitmap_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bitmap.o(i.bitmap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bitmap_init &rArr; bitmap_alloc_data &rArr; graphic_buffer_create_for_bitmap &rArr; graphic_buffer_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_with_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
</UL>

<P><STRONG><a name="[2e2]"></a>bitmap_lock_buffer_for_read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_lock_buffer_for_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_lock_buffer_for_read &rArr; graphic_buffer_lock_for_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_lock_for_read
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2e4]"></a>bitmap_lock_buffer_for_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_lock_buffer_for_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_lock_buffer_for_write &rArr; graphic_buffer_lock_for_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_lock_for_write
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_fill_rect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_copy_image
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_blend_image
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2df]"></a>bitmap_set_line_length</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bitmap.o(i.bitmap_set_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>

<P><STRONG><a name="[2e6]"></a>bitmap_unlock_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bitmap.o(i.bitmap_unlock_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_unlock_buffer &rArr; graphic_buffer_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_fill_rect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_copy_image
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_blend_image
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2f2]"></a>blend_image_bgr565_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_bgr565.o(i.blend_image_bgr565_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = blend_image_bgr565_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[2f5]"></a>blend_image_bgr565_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgr565_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[2f8]"></a>blend_image_bgr565_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_rgb565.o(i.blend_image_bgr565_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = blend_image_bgr565_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[2fb]"></a>blend_image_bgr565_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_bgr565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = blend_image_bgr565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[2fe]"></a>blend_image_bgr888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_bgr565.o(i.blend_image_bgr888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgr888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[301]"></a>blend_image_bgr888_bgr888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_bgr888.o(i.blend_image_bgr888_bgr888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgr888_bgr888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[304]"></a>blend_image_bgr888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_bgr888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgr888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[307]"></a>blend_image_bgr888_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_rgb565.o(i.blend_image_bgr888_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgr888_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[30a]"></a>blend_image_bgr888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_bgr888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgr888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[30d]"></a>blend_image_bgra8888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_bgra8888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgra8888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[310]"></a>blend_image_bgra8888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_bgra8888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgra8888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[313]"></a>blend_image_bgra8888_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_rgb565.o(i.blend_image_bgra8888_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgra8888_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[316]"></a>blend_image_bgra8888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_bgra8888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_bgra8888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[319]"></a>blend_image_rgb565_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_bgr565.o(i.blend_image_rgb565_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = blend_image_rgb565_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[31c]"></a>blend_image_rgb565_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_rgb565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = blend_image_rgb565_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[31f]"></a>blend_image_rgb565_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_rgb565.o(i.blend_image_rgb565_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = blend_image_rgb565_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[322]"></a>blend_image_rgb565_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_rgb565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[325]"></a>blend_image_rgb888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb888_bgr565.o(i.blend_image_rgb888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgb888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[328]"></a>blend_image_rgb888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb888_bgra8888.o(i.blend_image_rgb888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgb888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[32b]"></a>blend_image_rgb888_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb888_rgb565.o(i.blend_image_rgb888_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgb888_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[32e]"></a>blend_image_rgb888_rgb888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb888_rgb888.o(i.blend_image_rgb888_rgb888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgb888_rgb888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[331]"></a>blend_image_rgb888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgb888_rgba8888.o(i.blend_image_rgb888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgb888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[334]"></a>blend_image_rgba8888_bgr565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_rgba8888_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgba8888_bgr565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[337]"></a>blend_image_rgba8888_bgra8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_rgba8888_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgba8888_bgra8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[33a]"></a>blend_image_rgba8888_rgb565</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_rgb565.o(i.blend_image_rgba8888_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgba8888_rgb565 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[33d]"></a>blend_image_rgba8888_rgba8888</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_rgba8888_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = blend_image_rgba8888_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
</UL>

<P><STRONG><a name="[3b9]"></a>color_init</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, color.o(i.color_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = color_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[366]"></a>darray_find</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, darray.o(i.darray_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_lookup
</UL>

<P><STRONG><a name="[367]"></a>darray_find_index</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, darray.o(i.darray_find_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = darray_find_index
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>

<P><STRONG><a name="[2bc]"></a>darray_push</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, darray.o(i.darray_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_add
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_add_font
</UL>

<P><STRONG><a name="[10]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[42c]"></a>emitter_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, emitter.o(i.emitter_init))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
</UL>

<P><STRONG><a name="[2ce]"></a>file_exist</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fs.o(i.file_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = file_exist &rArr; fs_file_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_fs
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_file_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_file
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_load_image
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
</UL>

<P><STRONG><a name="[36a]"></a>file_get_size</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fs.o(i.file_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = file_get_size &rArr; fs_get_file_size
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_fs
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_file_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
</UL>

<P><STRONG><a name="[36c]"></a>file_read_part</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, fs.o(i.file_read_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = file_read_part &rArr; fs_open_file
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_fs
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open_file
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_file_seek
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_file_read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_asset_from_file
</UL>

<P><STRONG><a name="[371]"></a>fill_abgr8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_abgr8888.o(i.fill_abgr8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_abgr8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[373]"></a>fill_argb8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_argb8888.o(i.fill_argb8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_argb8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[375]"></a>fill_bgr565_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgr565.o(i.fill_bgr565_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_bgr565_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[377]"></a>fill_bgr888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgr888.o(i.fill_bgr888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_bgr888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[379]"></a>fill_bgra8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_bgra8888.o(i.fill_bgra8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_bgra8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[37e]"></a>fill_rgb565_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_rgb565.o(i.fill_rgb565_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_rgb565_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[37f]"></a>fill_rgb888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_rgb888.o(i.fill_rgb888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_rgb888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[380]"></a>fill_rgba8888_rect</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, fill_image_rgba8888.o(i.fill_rgba8888_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
</UL>

<P><STRONG><a name="[2b9]"></a>find_item_by_value</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, enums.o(i.find_item_by_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_item_by_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_type_find_by_value
</UL>

<P><STRONG><a name="[387]"></a>font_loader_load</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, font_loader.o(i.font_loader_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = font_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
</UL>

<P><STRONG><a name="[46a]"></a>font_manager</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, font_manager.o(i.font_manager))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[381]"></a>font_manager_add_font</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, font_manager.o(i.font_manager_add_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = font_manager_add_font &rArr; darray_push &rArr; darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[382]"></a>font_manager_get_font</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, font_manager.o(i.font_manager_get_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; assets_manager_ref_impl &rArr; assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_lookup
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_load
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_add_font
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[385]"></a>font_manager_load</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, font_manager.o(i.font_manager_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = font_manager_load &rArr; assets_manager_ref &rArr; assets_manager_ref_impl &rArr; assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_loader_load
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[384]"></a>font_manager_lookup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, font_manager.o(i.font_manager_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = font_manager_lookup &rArr; darray_find &rArr; darray_find_index
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_find
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[c2]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[265]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[370]"></a>fs_file_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs.o(i.fs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
</UL>

<P><STRONG><a name="[369]"></a>fs_file_exist</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fs.o(i.fs_file_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_file_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_exist
</UL>

<P><STRONG><a name="[36f]"></a>fs_file_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fs.o(i.fs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
</UL>

<P><STRONG><a name="[36e]"></a>fs_file_seek</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fs.o(i.fs_file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_file_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
</UL>

<P><STRONG><a name="[36b]"></a>fs_get_file_size</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs.o(i.fs_get_file_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_get_file_size
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
</UL>

<P><STRONG><a name="[36d]"></a>fs_open_file</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs.o(i.fs_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
</UL>

<P><STRONG><a name="[389]"></a>g2d_blend_image</STRONG> (Thumb, 460 bytes, Stack size 96 bytes, stm32_g2d.o(i.g2d_blend_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = g2d_blend_image &rArr; bitmap_unlock_buffer &rArr; graphic_buffer_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
</UL>

<P><STRONG><a name="[38a]"></a>g2d_copy_image</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, stm32_g2d.o(i.g2d_copy_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = g2d_copy_image &rArr; bitmap_unlock_buffer &rArr; graphic_buffer_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
</UL>

<P><STRONG><a name="[38b]"></a>g2d_fill_rect</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, stm32_g2d.o(i.g2d_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = g2d_fill_rect &rArr; bitmap_unlock_buffer &rArr; graphic_buffer_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
</UL>

<P><STRONG><a name="[395]"></a>g2d_rotate_image</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_g2d.o(i.g2d_rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = g2d_rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
</UL>

<P><STRONG><a name="[43e]"></a>get_time_ms64</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_tick_handler.o(i.get_time_ms64))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_test
</UL>

<P><STRONG><a name="[3b7]"></a>graphic_buffer_attach</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, graphic_buffer.o(i.graphic_buffer_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = graphic_buffer_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>

<P><STRONG><a name="[2da]"></a>graphic_buffer_create_for_bitmap</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, graphic_buffer_default.o(i.graphic_buffer_create_for_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = graphic_buffer_create_for_bitmap &rArr; graphic_buffer_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_alloc_data
</UL>

<P><STRONG><a name="[2e1]"></a>graphic_buffer_create_with_data</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, graphic_buffer_default.o(i.graphic_buffer_create_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[3a5]"></a>graphic_buffer_destroy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, graphic_buffer.o(i.graphic_buffer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = graphic_buffer_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_destroy
</UL>

<P><STRONG><a name="[2e3]"></a>graphic_buffer_lock_for_read</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, graphic_buffer.o(i.graphic_buffer_lock_for_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = graphic_buffer_lock_for_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
</UL>

<P><STRONG><a name="[2e5]"></a>graphic_buffer_lock_for_write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, graphic_buffer.o(i.graphic_buffer_lock_for_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = graphic_buffer_lock_for_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
</UL>

<P><STRONG><a name="[2e7]"></a>graphic_buffer_unlock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, graphic_buffer.o(i.graphic_buffer_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = graphic_buffer_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
</UL>

<P><STRONG><a name="[38e]"></a>image_blend</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, image_g2d.o(i.image_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = image_blend &rArr; soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_blend_image
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
</UL>

<P><STRONG><a name="[390]"></a>image_copy</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, image_g2d.o(i.image_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = image_copy &rArr; g2d_copy_image &rArr; bitmap_unlock_buffer &rArr; graphic_buffer_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_copy_image
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
</UL>

<P><STRONG><a name="[392]"></a>image_fill</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, image_g2d.o(i.image_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_fill_rect
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>

<P><STRONG><a name="[394]"></a>image_rotate</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, image_g2d.o(i.image_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = image_rotate &rArr; soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g2d_rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
</UL>

<P><STRONG><a name="[397]"></a>lcd_begin_frame</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lcd_1.o(i.lcd_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_begin_frame &rArr; rect_fix
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[399]"></a>lcd_end_frame</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_end_frame &rArr; time_now_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_now_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[3bb]"></a>lcd_fill_rect</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lcd_1.o(i.lcd_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[3b1]"></a>lcd_flush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[3aa]"></a>lcd_get_vgcanvas</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_get_vgcanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_get_vgcanvas
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[39b]"></a>lcd_impl_create</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd_impl.o(i.lcd_impl_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lcd_impl_create &rArr; lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_bgr565_create_double_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[39d]"></a>lcd_is_swappable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_is_swappable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_is_swappable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[39c]"></a>lcd_mem_bgr565_create_double_fb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lcd_mem_bgr565.o(i.lcd_mem_bgr565_create_double_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create_double_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_impl_create
</UL>

<P><STRONG><a name="[3ba]"></a>lcd_set_fill_color</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd_1.o(i.lcd_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>

<P><STRONG><a name="[3b0]"></a>lcd_swap</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[3b2]"></a>lcd_sync</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_1.o(i.lcd_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_end_frame
</UL>

<P><STRONG><a name="[3b8]"></a>lcd_test</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, main.o(i.lcd_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lcd_test &rArr; lcd_impl_create &rArr; lcd_mem_bgr565_create_double_fb &rArr; lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_fill_color
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_impl_create
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_rect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_end_frame
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_begin_frame
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c6]"></a>locale_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, locale_info.o(i.locale_info))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_locale_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
</UL>

<P><STRONG><a name="[173]"></a>main</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; LCD_Init &rArr; LTDC_Init &rArr; LTDC_Clk_Set &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_prepare
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Memory_Protection
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Display_Dir
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cache_Enable
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_test
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3c1]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = malloc &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
</UL>

<P><STRONG><a name="[3c4]"></a>my_mem_free</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[c]"></a>my_mem_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[3c5]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[d]"></a>my_mem_perused</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[1be]"></a>myfree</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_writepage
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readspare
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readpage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlwritesectors
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlreadsectors
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_copypageandwrite
</UL>

<P><STRONG><a name="[1bf]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_writepage
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readspare
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_readpage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlwritesectors
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ftlreadsectors
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_copypageandwrite
</UL>

<P><STRONG><a name="[3c3]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[3c8]"></a>nvgArc</STRONG> (Thumb, 752 bytes, Stack size 672 bytes, nanovg.o(i.nvgArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__mini
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxi
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_arc
</UL>

<P><STRONG><a name="[3cf]"></a>nvgArcTo</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, nanovg.o(i.nvgArcTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = nvgArcTo &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tanf
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__distPtSeg
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cross
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__atan2f
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_arc_to
</UL>

<P><STRONG><a name="[3d8]"></a>nvgBeginFrame</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nanovg.o(i.nvgBeginFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nvgBeginFrame &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setDevicePixelRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_begin_frame
</UL>

<P><STRONG><a name="[3dc]"></a>nvgBeginPath</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nanovg.o(i.nvgBeginPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvgBeginPath
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__clearPathCache
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_begin_path
</UL>

<P><STRONG><a name="[3de]"></a>nvgBezierTo</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, nanovg.o(i.nvgBezierTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgBezierTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_bezier_to
</UL>

<P><STRONG><a name="[3df]"></a>nvgClosePath</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nanovg.o(i.nvgClosePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nvgClosePath &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_close_path
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
</UL>

<P><STRONG><a name="[3e0]"></a>nvgCreateAGGE</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, nanovg_agge.o(i.nvgCreateAGGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
</UL>

<P><STRONG><a name="[46b]"></a>nvgCreateFontMem</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, nanovg.o(i.nvgCreateFontMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvgCreateFontMem
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[464]"></a>nvgCreateImageRaw</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, nanovg.o(i.nvgCreateImageRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvgCreateImageRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[3e1]"></a>nvgCreateInternal</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, nanovg.o(i.nvgCreateInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nvgCreateInternal &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setDevicePixelRatio
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[468]"></a>nvgDeleteFontByName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgDeleteFontByName))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_reset
</UL>

<P><STRONG><a name="[3e8]"></a>nvgDeleteImage</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg.o(i.nvgDeleteImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgDeleteImage
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>

<P><STRONG><a name="[3e2]"></a>nvgDeleteInternal</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nanovg.o(i.nvgDeleteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvgDeleteInternal &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_destroy
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[3e5]"></a>nvgEllipse</STRONG> (Thumb, 298 bytes, Stack size 152 bytes, nanovg.o(i.nvgEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nvgEllipse &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ellipse
</UL>

<P><STRONG><a name="[3e6]"></a>nvgEndFrame</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, nanovg.o(i.nvgEndFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvgEndFrame &rArr; nvgImageSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImageSize
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteImage
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_end_frame
</UL>

<P><STRONG><a name="[3e9]"></a>nvgFill</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, nanovg.o(i.nvgFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
</UL>

<P><STRONG><a name="[3ed]"></a>nvgFillColor</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgFillColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgFillColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_color
</UL>

<P><STRONG><a name="[3ef]"></a>nvgFillPaint</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgFillPaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvgFillPaint &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[469]"></a>nvgFindFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nanovg.o(i.nvgFindFont))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[463]"></a>nvgFindTextureRaw</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nanovg.o(i.nvgFindTextureRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgFindTextureRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
</UL>

<P><STRONG><a name="[46c]"></a>nvgFontFaceId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgFontFaceId))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font
</UL>

<P><STRONG><a name="[3f1]"></a>nvgFontSize</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgFontSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgFontSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_font_size
</UL>

<P><STRONG><a name="[406]"></a>nvgGetParams</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgGetParams))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
</UL>

<P><STRONG><a name="[3f2]"></a>nvgGlobalAlpha</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgGlobalAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgGlobalAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_global_alpha
</UL>

<P><STRONG><a name="[3f3]"></a>nvgImagePattern</STRONG> (Thumb, 134 bytes, Stack size 120 bytes, nanovg.o(i.nvgImagePattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nvgImagePattern &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBAf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[3e7]"></a>nvgImageSize</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgImageSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>

<P><STRONG><a name="[3f6]"></a>nvgIntersectScissor_ex</STRONG> (Thumb, 362 bytes, Stack size 120 bytes, nanovg.o(i.nvgIntersectScissor_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgIntersectScissor_ex &rArr; nvg__isectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__isectRects
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_intersect_clip_rect
</UL>

<P><STRONG><a name="[3fa]"></a>nvgLineCap</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nanovg.o(i.nvgLineCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgLineCap
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_cap
</UL>

<P><STRONG><a name="[3fb]"></a>nvgLineJoin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nanovg.o(i.nvgLineJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgLineJoin
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_join
</UL>

<P><STRONG><a name="[3d2]"></a>nvgLineTo</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nanovg.o(i.nvgLineTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nvgLineTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_line_to
</UL>

<P><STRONG><a name="[3fc]"></a>nvgLinearGradient</STRONG> (Thumb, 274 bytes, Stack size 176 bytes, nanovg.o(i.nvgLinearGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
</UL>

<P><STRONG><a name="[3fe]"></a>nvgMiterLimit</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgMiterLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgMiterLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_miter_limit
</UL>

<P><STRONG><a name="[3ff]"></a>nvgMoveTo</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nanovg.o(i.nvgMoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nvgMoveTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_move_to
</UL>

<P><STRONG><a name="[400]"></a>nvgPathWinding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nanovg.o(i.nvgPathWinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nvgPathWinding &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_path_winding
</UL>

<P><STRONG><a name="[401]"></a>nvgQuadTo</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, nanovg.o(i.nvgQuadTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgQuadTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_quad_to
</UL>

<P><STRONG><a name="[407]"></a>nvgRGBA</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, nanovg.o(i.nvgRGBA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvgRGBA
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_color
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[3f5]"></a>nvgRGBAf</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nanovg.o(i.nvgRGBAf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvgRGBAf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
</UL>

<P><STRONG><a name="[402]"></a>nvgRadialGradient</STRONG> (Thumb, 152 bytes, Stack size 168 bytes, nanovg.o(i.nvgRadialGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
</UL>

<P><STRONG><a name="[404]"></a>nvgRect</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, nanovg.o(i.nvgRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[405]"></a>nvgReinitAgge</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, nanovg_agge.o(i.nvgReinitAgge))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nvgReinitAgge &rArr; nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGetParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_reinit
</UL>

<P><STRONG><a name="[3da]"></a>nvgReset</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, nanovg.o(i.nvgReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__compositeOperationState
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[409]"></a>nvgResetTransform</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nanovg.o(i.nvgResetTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgResetTransform
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_transform
</UL>

<P><STRONG><a name="[462]"></a>nvgRestore</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nanovg.o(i.nvgRestore))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_restore
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[40a]"></a>nvgRotate</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, nanovg.o(i.nvgRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nvgRotate &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_rotate
</UL>

<P><STRONG><a name="[40c]"></a>nvgRoundedRect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nanovg.o(i.nvgRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nvgRoundedRect &rArr; nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_rounded_rect
</UL>

<P><STRONG><a name="[40d]"></a>nvgRoundedRectVarying</STRONG> (Thumb, 758 bytes, Stack size 264 bytes, nanovg.o(i.nvgRoundedRectVarying))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__signf
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__minf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRect
</UL>

<P><STRONG><a name="[3d9]"></a>nvgSave</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nanovg.o(i.nvgSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvgSave &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_save
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[410]"></a>nvgScale</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nanovg.o(i.nvgScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvgScale &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformScale
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_scale
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[3f7]"></a>nvgScissor</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, nanovg.o(i.nvgScissor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvgScissor
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clip_rect
</UL>

<P><STRONG><a name="[412]"></a>nvgStroke</STRONG> (Thumb, 442 bytes, Stack size 136 bytes, nanovg.o(i.nvgStroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getAverageScale
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__clampf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_stroke
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
</UL>

<P><STRONG><a name="[416]"></a>nvgStrokeColor</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgStrokeColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nvgStrokeColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_color
</UL>

<P><STRONG><a name="[417]"></a>nvgStrokePaint</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg.o(i.nvgStrokePaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvgStrokePaint &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
</UL>

<P><STRONG><a name="[418]"></a>nvgStrokeWidth</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nanovg.o(i.nvgStrokeWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvgStrokeWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_line_width
</UL>

<P><STRONG><a name="[466]"></a>nvgText</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg.o(i.nvgText))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
</UL>

<P><STRONG><a name="[465]"></a>nvgTextAlign</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nanovg.o(i.nvgTextAlign))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_fill_text
</UL>

<P><STRONG><a name="[467]"></a>nvgTextBounds</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg.o(i.nvgTextBounds))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_measure_text
</UL>

<P><STRONG><a name="[419]"></a>nvgTransform</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, nanovg.o(i.nvgTransform))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_transform
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_transform
</UL>

<P><STRONG><a name="[403]"></a>nvgTransformIdentity</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformIdentity))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__setPaintColor
</UL>

<P><STRONG><a name="[3f8]"></a>nvgTransformInverse</STRONG> (Thumb, 290 bytes, Stack size 4 bytes, nanovg.o(i.nvgTransformInverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nvgTransformInverse
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[3f0]"></a>nvgTransformMultiply</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformMultiply))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
</UL>

<P><STRONG><a name="[421]"></a>nvgTransformPoint</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformPoint))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[40b]"></a>nvgTransformPremultiply</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, nanovg.o(i.nvgTransformPremultiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformMultiply
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
</UL>

<P><STRONG><a name="[3f4]"></a>nvgTransformRotate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nanovg.o(i.nvgTransformRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sinf
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
</UL>

<P><STRONG><a name="[411]"></a>nvgTransformScale</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformScale))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
</UL>

<P><STRONG><a name="[41b]"></a>nvgTransformTranslate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvgTransformTranslate))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
</UL>

<P><STRONG><a name="[41a]"></a>nvgTranslate</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nanovg.o(i.nvgTranslate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvgTranslate &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformTranslate
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPremultiply
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_translate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[42b]"></a>object_create</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, object.o(i.object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = object_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
</UL>

<P><STRONG><a name="[368]"></a>os_fs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_os.o(i.os_fs))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_exist
</UL>

<P><STRONG><a name="[356]"></a>path_build</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, path.o(i.path_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_dir_one_theme
</UL>

<P><STRONG><a name="[3be]"></a>platform_prepare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform.o(i.platform_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = platform_prepare &rArr; tk_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>read_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[25c]"></a>realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
</UL>

<P><STRONG><a name="[398]"></a>rect_fix</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, rect.o(i.rect_fix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rect_fix
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_begin_frame
</UL>

<P><STRONG><a name="[3b3]"></a>rect_init</STRONG> (Thumb, 22 bytes, Stack size 36 bytes, rect.o(i.rect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rect_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_test
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>

<P><STRONG><a name="[431]"></a>rotate_bgr565_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgr565.o(i.rotate_bgr565_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_bgr565_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[433]"></a>rotate_bgr888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgr888.o(i.rotate_bgr888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_bgr888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[435]"></a>rotate_bgra8888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_bgra8888.o(i.rotate_bgra8888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_bgra8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[43a]"></a>rotate_rgb565_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_rgb565.o(i.rotate_rgb565_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_rgb565_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[43b]"></a>rotate_rgb888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_rgb888.o(i.rotate_rgb888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_rgb888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[43c]"></a>rotate_rgba8888_image</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rotate_image_rgba8888.o(i.rotate_rgba8888_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_image
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_rotate_image
</UL>

<P><STRONG><a name="[43d]"></a>sleep_ms</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, sys_tick_handler.o(i.sleep_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sleep_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms64
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_test
</UL>

<P><STRONG><a name="[38f]"></a>soft_blend_image</STRONG> (Thumb, 784 bytes, Stack size 32 bytes, soft_g2d.o(i.soft_blend_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgb565
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgba8888
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb888
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb565
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgra8888
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgr565
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgb565
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgb565
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgb565
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr888
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgb565
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
</UL>

<P><STRONG><a name="[391]"></a>soft_copy_image</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, soft_g2d.o(i.soft_copy_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = soft_copy_image &rArr; tk_pixel_copy &rArr; tk_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_blend_image
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
</UL>

<P><STRONG><a name="[393]"></a>soft_fill_rect</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, soft_g2d.o(i.soft_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgba8888_rect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb888_rect
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb565_rect
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgra8888_rect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr888_rect
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr565_rect
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_argb8888_rect
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_abgr8888_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
</UL>

<P><STRONG><a name="[396]"></a>soft_rotate_image</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, soft_g2d.o(i.soft_rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgba8888_image
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb888_image
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb565_image
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgra8888_image
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr888_image
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr565_image
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
</UL>

<P><STRONG><a name="[2ac]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[3bd]"></a>sys_tick_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sys_tick.o(i.sys_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c7]"></a>system_info</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_info.o(i.system_info))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_fix_font_name
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_system_info
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_is_swappable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[441]"></a>system_info_create</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, system_info.o(i.system_info_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = system_info_create &rArr; system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
</UL>

<P><STRONG><a name="[383]"></a>system_info_fix_font_name</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, system_info.o(i.system_info_fix_font_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_info_fix_font_name
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
</UL>

<P><STRONG><a name="[3c0]"></a>system_info_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system_info.o(i.system_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = system_info_init &rArr; system_info_create &rArr; system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_default_font
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[442]"></a>system_info_set_app_info</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system_info.o(i.system_info_set_app_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = system_info_set_app_info &rArr; system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_normalize_app_root
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_create
</UL>

<P><STRONG><a name="[445]"></a>system_info_set_default_font</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_default_font))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_init
</UL>

<P><STRONG><a name="[3a3]"></a>system_info_set_device_pixel_ratio</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_device_pixel_ratio))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[3a1]"></a>system_info_set_lcd_h</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_h))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[3a2]"></a>system_info_set_lcd_type</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_type))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[3a0]"></a>system_info_set_lcd_w</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_info.o(i.system_info_set_lcd_w))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>

<P><STRONG><a name="[3bf]"></a>systick_test</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, main.o(i.systick_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = systick_test &rArr; sleep_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms64
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>test_copypageandwrite</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, nandtester.o(i.test_copypageandwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = test_copypageandwrite &rArr; NAND_CopyPageWithWrite &rArr; NAND_WaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_CopyPageWithWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>test_ftlreadsectors</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nandtester.o(i.test_ftlreadsectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = test_ftlreadsectors &rArr; FTL_ReadSectors &rArr; FTL_CopyAndWriteToBlock &rArr; FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_ReadSectors
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>test_ftlwritesectors</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nandtester.o(i.test_ftlwritesectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = test_ftlwritesectors &rArr; FTL_WriteSectors &rArr; FTL_CopyAndWriteToBlock &rArr; FTL_FindSamePlaneUnusedBlock &rArr; FTL_FindUnusedBlock &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTL_WriteSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>test_readallblockinfo</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nandtester.o(i.test_readallblockinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = test_readallblockinfo &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>test_readpage</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nandtester.o(i.test_readpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = test_readpage &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadPage
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>test_readspare</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, nandtester.o(i.test_readspare))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = test_readspare &rArr; NAND_ReadSpare &rArr; NAND_ReadPage &rArr; NAND_ECC_Correction &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_ReadSpare
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>test_writepage</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nandtester.o(i.test_writepage))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = test_writepage &rArr; NAND_WritePage &rArr; NAND_WaitForReady &rArr; NAND_ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_WritePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[39a]"></a>time_now_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time_now.o(i.time_now_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time_now_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_ms64
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_end_frame
</UL>

<P><STRONG><a name="[2aa]"></a>tk_alloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mem.o(i.tk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_create
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_create
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
</UL>

<P><STRONG><a name="[38d]"></a>tk_calloc</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, mem.o(i.tk_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_with_data
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
</UL>

<P><STRONG><a name="[2a8]"></a>tk_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mem.o(i.tk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_on_destroy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_destroy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_destroy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_destroy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_destroy
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_default_create
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_destroy
</UL>

<P><STRONG><a name="[42f]"></a>tk_mem_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mem.o(i.tk_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_prepare
</UL>

<P><STRONG><a name="[448]"></a>tk_mem_on_out_of_memory</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mem.o(i.tk_mem_on_out_of_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_mem_on_out_of_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>

<P><STRONG><a name="[44a]"></a>tk_memcpy16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utils.o(i.tk_memcpy16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_memcpy16
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>

<P><STRONG><a name="[44b]"></a>tk_memcpy32</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, utils.o(i.tk_memcpy32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tk_memcpy32
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_pixel_copy
</UL>

<P><STRONG><a name="[35a]"></a>tk_memset16</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, utils.o(i.tk_memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[35c]"></a>tk_memset24</STRONG> (Thumb, 210 bytes, Stack size 36 bytes, utils.o(i.tk_memset24))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tk_memset24
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[35b]"></a>tk_memset32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, utils.o(i.tk_memset32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tk_memset32
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>

<P><STRONG><a name="[43f]"></a>tk_pixel_copy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, utils.o(i.tk_pixel_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_pixel_copy &rArr; tk_memcpy32
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memcpy32
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memcpy16
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_copy_image
</UL>

<P><STRONG><a name="[365]"></a>tk_realloc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mem.o(i.tk_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_mem_on_out_of_memory
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_extend
</UL>

<P><STRONG><a name="[2d6]"></a>tk_replace_locale</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, utils.o(i.tk_replace_locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tk_replace_locale &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[2d5]"></a>tk_snprintf</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, utils.o(i.tk_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tk_snprintf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[357]"></a>tk_str_append</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, utils.o(i.tk_str_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tk_str_append &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_one_theme
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_custom
</UL>

<P><STRONG><a name="[447]"></a>tk_strdup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utils.o(i.tk_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strndup
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_normalize_app_root
</UL>

<P><STRONG><a name="[44d]"></a>tk_strndup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utils.o(i.tk_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>

<P><STRONG><a name="[3bc]"></a>uart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>usmart_cmd_rec</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>usmart_exe</STRONG> (Thumb, 632 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[457]"></a>usmart_get_aparm</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[45d]"></a>usmart_get_cmdname</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[450]"></a>usmart_get_fname</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[452]"></a>usmart_get_fparam</STRONG> (Thumb, 262 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[453]"></a>usmart_get_parmpos</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[455]"></a>usmart_get_runtime</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[25]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usmart_init &rArr; Timer4_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[45c]"></a>usmart_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[454]"></a>usmart_reset_runtime</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[28]"></a>usmart_scan</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[456]"></a>usmart_search_nextc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[458]"></a>usmart_str2num</STRONG> (Thumb, 262 bytes, Stack size 36 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[451]"></a>usmart_strcmp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[45a]"></a>usmart_strcopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[459]"></a>usmart_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[45b]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1570 bytes, Stack size 56 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[45f]"></a>value_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.value_init))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int32
</UL>

<P><STRONG><a name="[443]"></a>value_set_int</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, value.o(i.value_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int32
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
</UL>

<P><STRONG><a name="[45e]"></a>value_set_int32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
</UL>

<P><STRONG><a name="[444]"></a>value_set_str</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.value_set_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = value_set_str
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_get_prop
</UL>

<P><STRONG><a name="[3ac]"></a>vgcanvas_clip_rect</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vgcanvas.o(i.vgcanvas_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vgcanvas_clip_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[3b5]"></a>vgcanvas_create</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = vgcanvas_create &rArr; nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
</UL>

<P><STRONG><a name="[3a4]"></a>vgcanvas_destroy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vgcanvas_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_destroy
</UL>

<P><STRONG><a name="[3ae]"></a>vgcanvas_draw_image</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, vgcanvas.o(i.vgcanvas_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[3b6]"></a>vgcanvas_reinit</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, vgcanvas.o(i.vgcanvas_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
</UL>

<P><STRONG><a name="[3af]"></a>vgcanvas_restore</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[3ab]"></a>vgcanvas_save</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vgcanvas.o(i.vgcanvas_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_save
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[460]"></a>vgcanvas_set_fill_color</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vgcanvas.o(i.vgcanvas_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_set_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_clear_rect
</UL>

<P><STRONG><a name="[3ad]"></a>vgcanvas_set_transform</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, vgcanvas.o(i.vgcanvas_set_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_set_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image_matrix
</UL>

<P><STRONG><a name="[f]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[16c]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[cb]"></a>void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c9]"></a>void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c7]"></a>void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c5]"></a>void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[cd]"></a>void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[cf]"></a>void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nanovg_agge.o(t._Z10renderFillIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorfPKfPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[470]"></a>void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1288 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge11pixel24_bgrEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[471]"></a>void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1276 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge11pixel24_rgbEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[472]"></a>void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1276 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge12pixel32_bgraEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[473]"></a>void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1276 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge12pixel32_rgbaEEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[474]"></a>void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1276 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge14pixel16_bgr565EEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[475]"></a>void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)</STRONG> (Thumb, 1288 bytes, Stack size 144 bytes, nanovg_agge.o(t._Z11renderPaintIN4agge14pixel16_rgb565EEvP14AGGENVGcontextP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_pixel32_rgba(NVGcolor)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformInverse
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::~bitmap()
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[ca]"></a>void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_bgrEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c8]"></a>void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge11pixel24_rgbEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c6]"></a>void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_bgraEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[c4]"></a>void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge12pixel32_rgbaEEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[cc]"></a>void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_bgr565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[ce]"></a>void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, nanovg_agge.o(t._Z12renderStrokeIN4agge14pixel16_rgb565EEvPvP8NVGpaint26NVGcompositeOperationStateP10NVGscissorffPK7NVGpathi))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int) &rArr; void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*) &rArr; void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::width(float)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::iterator(NVGvertex*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh)
</UL>
<P><STRONG><a name="[24e]"></a>agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, nanovg_agge.o(t._Z6mkrectIfEN4agge4rectIT_EES2_S2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
</UL>

<P><STRONG><a name="[57b]"></a>int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge10clipping_yIiEEiT_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>

<P><STRONG><a name="[283]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::end()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[4b8]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[282]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[27f]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[285]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[65d]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::pod_vector__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEEC1Ej), UNUSED)

<P><STRONG><a name="[266]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[65e]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::~pod_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorINS_17vector_rasterizer4cellEED1Ev), UNUSED)

<P><STRONG><a name="[296]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::end()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stroke.o(t._ZN4agge10pod_vectorINS_5pointIfEEE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
</UL>

<P><STRONG><a name="[29d]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stroke.o(t._ZN4agge10pod_vectorINS_5pointIfEEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[2a1]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stroke_features.o(t._ZN4agge10pod_vectorINS_5pointIfEEE9push_backERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::push_back(const agge::point&lang;float&rang;&) &rArr; agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[29b]"></a>agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stroke.o(t._ZN4agge10pod_vectorINS_6vertexEE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::capacity() const
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::size() const
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[4bb]"></a>agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stroke.o(t._ZN4agge10pod_vectorINS_6vertexEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
</UL>

<P><STRONG><a name="[4bc]"></a>agge::pod_vector&lang;unsigned&rang;::grow(unsigned)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE4growEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::capacity() const
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[280]"></a>agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE6assignEjRKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[4be]"></a>agge::pod_vector&lang;unsigned&rang;::resize(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::capacity() const
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::assign(unsigned, const unsigned&)
</UL>

<P><STRONG><a name="[286]"></a>agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::pod_vector(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;unsigned&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::vector_rasterizer()
</UL>

<P><STRONG><a name="[65f]"></a>agge::pod_vector&lang;unsigned&rang;::pod_vector__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEC1Ej), UNUSED)

<P><STRONG><a name="[267]"></a>agge::pod_vector&lang;unsigned&rang;::~pod_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorIjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = agge::pod_vector&lang;unsigned&rang;::~pod_vector() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>

<P><STRONG><a name="[660]"></a>agge::pod_vector&lang;unsigned&rang;::~pod_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10pod_vectorIjED1Ev), UNUSED)

<P><STRONG><a name="[281]"></a>agge::pod_vector&lang;unsigned&rang;::operator [](unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge10pod_vectorIjEixEj))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[250]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE12set_clippingERKNS_4rectIfEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&) &rArr; agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)
</UL>

<P><STRONG><a name="[46f]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE13close_polygonEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon() &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[4c1]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE4lineEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>

<P><STRONG><a name="[46e]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE7line_toEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float) &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[46d]"></a>agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge10rasterizerINS_7clipperIiEENS_7scalingIiEEE7move_toEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float) &rArr; agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scaling&lang;int&rang;::scale1(float, float, int&, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[2a0]"></a>agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stroke_features.o(t._ZN4agge12create_pointIfEENS_5pointIT_EES2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::point&lang;T1&rang; agge::create_point&lang;float&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::miter::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::square::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::round::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::calc(agge::pod_vector&lang;agge::point&lang;float&rang;&rang;&, float, const agge::point&lang;float&rang;&, float, const agge::point&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[5d5]"></a>void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge12pixel_linearINS_12pixel32_rgbaES1_EEvRT_RKT0_f))
<BR><BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5d4]"></a>void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge13pixel_convertINS_12pixel32_rgbaENS_11pixel24_rgbEEEvRT_RKT0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[4c2]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4c6]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4c8]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4ca]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4cc]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4ce]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4d0]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4d2]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4d4]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4d6]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4d8]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4da]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4dc]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4de]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4e0]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4e2]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4e4]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4e6]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4e8]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4ea]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4ec]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4ee]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4f0]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4f2]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4f4]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4f6]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4f8]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4fa]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4fc]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4fe]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[500]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[502]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[504]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[506]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[508]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[50a]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[50c]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[50e]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[510]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SM_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[512]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[514]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[516]"></a>void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, nanovg_agge.o(t._ZN4agge14sweep_scanlineILj8ENS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEEPKNS_17vector_rasterizer4cellENS_7windingILh8EEEEEvRT0_T1_SK_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[4c4]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4c7]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4c9]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4cb]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4cd]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4cf]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4d1]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4d3]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4d5]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4d7]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4d9]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4db]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4dd]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4df]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4e1]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4e3]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4e5]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4e7]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4e9]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4eb]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4ed]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4ef]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4f1]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4f3]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4f5]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4f7]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4f9]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4fb]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4fd]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[4ff]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[501]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[503]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_S6_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[505]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[507]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[509]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[50b]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_11pixel24_rgbES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[50d]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_bgraES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[50f]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_12pixel32_rgbaES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[511]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS4_NS3_INS_14pixel16_bgr565ES5_EEEEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[513]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[515]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[517]"></a>agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS4_EEEEE6commitEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[542]"></a>T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge17raw_memory_object3getIhEEPT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[292]"></a>void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, stroke.o(t._ZN4agge19add_polyline_vertexINS_6strokeEEEvRT_ffi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::empty() const
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vertex_sequence::set_distance(agge::vertex&, const agge::point&lang;float&rang;&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::add_vertex(float, float, int)
</UL>

<P><STRONG><a name="[543]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEE6vertexEPfS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*) &rArr; agge::stroke::add_vertex(float, float, int) &rArr; void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int) &rArr; agge::pod_vector&lang;agge::vertex&rang;::push_back(const agge::vertex&) &rArr; agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::vertex(float*, float*)
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::remove_all()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::add_vertex(float, float, int)
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_vertex::iterator::vertex(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)
</UL>

<P><STRONG><a name="[545]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEE9set_stageENS4_5stateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::set_stage(agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::state, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
</UL>

<P><STRONG><a name="[4b6]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEC1ERKS2_RS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter(const agge::nanovg_vertex::iterator&, agge::stroke&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[661]"></a>agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::path_generator_adapter__sub_object(const agge::nanovg_vertex::iterator&, agge::stroke&)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, nanovg_agge.o(t._ZN4agge22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEC1ERKS2_RS3_), UNUSED)

<P><STRONG><a name="[488]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_bgrEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[662]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_bgrEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[490]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_rgbEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[663]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_11pixel24_rgbEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[498]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_bgraEEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[664]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_bgraEEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[4a0]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_rgbaEEC1EffffS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[665]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_12pixel32_rgbaEEC1EffffS1_S1_), UNUSED)

<P><STRONG><a name="[4a8]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_bgr565EEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[666]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_bgr565EEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[4b1]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_rgb565EEC1EffffNS_12pixel32_rgbaES3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[667]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::blender_linear_gradient__sub_object(float, float, float, float, agge::pixel32_rgba, agge::pixel32_rgba)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge23blender_linear_gradientINS_14pixel16_rgb565EEC1EffffNS_12pixel32_rgbaES3_), UNUSED)

<P><STRONG><a name="[57d]"></a>T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge5widthIiEET_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[547]"></a>agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_bgrENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[549]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[483]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[668]"></a>agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[54a]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[47d]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[669]"></a>agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[54b]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[478]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[66a]"></a>agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[54c]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[480]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEC1EjjjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap(unsigned, unsigned, unsigned, unsigned char*) &rArr; agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::raw_bitmap(unsigned, unsigned, unsigned, agge::bits_per_pixel, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[66b]"></a>agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::bitmap__sub_object(unsigned, unsigned, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEC1EjjjPh), UNUSED)

<P><STRONG><a name="[54d]"></a>agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEE7row_ptrEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::row_ptr(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
</UL>

<P><STRONG><a name="[57e]"></a>T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZN4agge6heightIiEET_RKNS_4rectIS1_EE))
<BR><BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>

<P><STRONG><a name="[4c5]"></a>void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nanovg_agge.o(t._ZN4agge6memsetIhEEvPT_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void agge::memset&lang;unsigned char&rang;(T1*, T1, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[54e]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[551]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[552]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[553]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[554]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[555]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[556]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[557]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[558]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[559]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55a]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55b]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55c]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55d]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55e]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[55f]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[560]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[561]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[562]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[563]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[564]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[565]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[566]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[567]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[568]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[569]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56a]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56b]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56c]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56d]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56e]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[56f]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_S7_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[570]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[571]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[572]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[573]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_11pixel24_rgbES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[574]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_bgraES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[575]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_12pixel32_rgbaES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[576]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS5_NS4_INS_14pixel16_bgr565ES6_EEEEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[577]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[578]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[579]"></a>void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge6renderINS_16scanline_adapterINS_8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS5_EEEEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_7windingILh8EEEEEvRT_RKT0_RKT1_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::height() const
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::operator [](int) const
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::min_y() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[252]"></a>void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge6stroke7set_capINS_4caps4buttEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&) &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::cap__sub_object(const agge::stroke::cap&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineCap(void*, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[259]"></a>void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge6stroke8set_joinINS_5joins5bevelEEEvRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&) &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::join__sub_object(const agge::stroke::join&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__setLineJoin(void*, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::AGGENVGcontext()
</UL>

<P><STRONG><a name="[4c0]"></a>void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)</STRONG> (Thumb, 1286 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZN4agge7clipperIiE7line_toINS_10rasterizerIS1_NS_7scalingIiEEEEEEvRT_ii))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
</UL>

<P><STRONG><a name="[4b7]"></a>void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2)</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZN4agge8add_pathINS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_22path_generator_adapterINS_13nanovg_vertex8iteratorENS_6strokeEEEEEvRT_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = void agge::add_path&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;&rang;(T1&, T2) &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float) &rArr; void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int) &rArr; void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::path_generator_adapter&lang;agge::nanovg_vertex::iterator, agge::stroke&rang;::vertex(float*, float*)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line_to(float, float)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::close_polygon()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
</UL>

<P><STRONG><a name="[4ba]"></a>T1 agge::agge_max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stroke.o(t._ZN4agge8agge_maxIjEET_RKS1_S3_))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[4bf]"></a>int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nanovg_agge.o(t._ZN4agge8clippingIiEEiT_S1_RKNS_4rectIS1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = int agge::clipping&lang;int&rang;(T1, T1, const agge::rect&lang;T1&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int agge::clipping_y&lang;int&rang;(T1, const agge::rect&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::move_to(float, float)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
</UL>

<P><STRONG><a name="[57c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[66c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[518]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[580]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[66d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[519]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[582]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[66e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[51a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[584]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[66f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[51b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[586]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[670]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[51c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[588]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[671]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[51d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[58a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[672]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[51e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[58c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[673]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[51f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[58e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[674]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[520]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[590]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[675]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[521]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[592]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[676]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[522]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[594]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[677]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[523]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[596]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[678]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[524]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[598]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[679]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[525]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[59a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[526]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[59c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[527]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[59e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[528]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5a0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[529]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5a2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[52a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5a4]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[67f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[52b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5a6]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[680]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[52c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5a8]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[681]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[52d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5aa]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[682]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[52e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5ac]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[683]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[52f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5ae]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[684]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[530]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5b0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[685]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[531]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5b2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[686]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[532]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5b4]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[687]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[533]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5b6]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[688]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[534]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5b8]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[689]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[535]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5ba]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[536]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5bc]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[537]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_S5_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5be]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[538]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5c0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[539]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5c2]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[53a]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5c4]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[68f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[53b]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5c6]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[690]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[53c]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5c8]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[691]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[53d]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5ca]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[692]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEC1ERS5_PKNS_4rectIiEERKS9_), UNUSED)

<P><STRONG><a name="[53e]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5cc]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[693]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[53f]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_linear_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5ce]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[694]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[540]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_radial_gradientIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[5d0]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::height&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 agge::width&lang;int&rang;(const agge::rect&lang;T1&rang;&)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::height() const
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::raw_bitmap::width() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)
</UL>

<P><STRONG><a name="[695]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter__sub_object(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEC1ERS5_PKNS_4rectIiEERKS7_), UNUSED)

<P><STRONG><a name="[541]"></a>agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZN4agge8renderer7adapterINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_23blender_solid_color_rgbIS3_EEEclEiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int)
</UL>

<P><STRONG><a name="[484]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[47e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[47b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[481]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[489]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48a]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[487]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_bgrENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48c]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48d]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[491]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[492]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[48f]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[496]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[493]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[495]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[494]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[499]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49a]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[497]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49e]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49c]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49d]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49b]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a1]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a2]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[49f]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&)
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a6]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a4]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a3]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a5]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_S5_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a9]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4aa]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4a7]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4af]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_11pixel24_rgbES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4ad]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_bgraES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4ac]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_12pixel32_rgbaES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4ae]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_20nanovg_image_blenderIS3_NS2_INS_14pixel16_bgr565ES4_EEEENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4b2]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_linear_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4b3]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_radial_gradientIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[4b0]"></a>void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&)</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, nanovg_agge.o(t._ZN4agge8rendererclINS_6bitmapINS_14pixel16_rgb565ENS_10raw_bitmapEEENS_10rasterizerINS_7clipperIiEENS_7scalingIiEEEENS_23blender_solid_color_rgbIS3_EENS_7windingILh8EEEEEvRT_PKNS_4rectIiEERKT0_RKT1_RKT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = void agge::renderer::operator ()&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const agge::rect&lang;int&rang;*, const T2&, const T3&, const T4&) &rArr; void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int) &rArr; void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&) &rArr; agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;::commit(int) &rArr; agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*) &rArr; void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::width() const
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::render&lang;agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;, agge::winding&lang;(unsigned char)8&rang;&rang;(T1&, const T2&, const T3&, int, int)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1* agge::raw_memory_object::get&lang;unsigned char&rang;(unsigned)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;::adapter(agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;&, const agge::rect&lang;int&rang;*, const agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[27e]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorINS_17vector_rasterizer4cellEE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)
</UL>

<P><STRONG><a name="[4b9]"></a>agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::capacity() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorINS_17vector_rasterizer4cellEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[29c]"></a>agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::capacity() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_5pointIfEEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::point&lang;float&rang;&rang;::grow(unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[299]"></a>agge::pod_vector&lang;agge::vertex&rang;::size() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::prepare()
</UL>

<P><STRONG><a name="[294]"></a>agge::pod_vector&lang;agge::vertex&rang;::empty() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::add_polyline_vertex&lang;agge::stroke&rang;(T1&, float, float, int)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::close_polygon()
</UL>

<P><STRONG><a name="[29a]"></a>agge::pod_vector&lang;agge::vertex&rang;::capacity() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stroke.o(t._ZNK4agge10pod_vectorINS_6vertexEE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vertex&rang;::grow(unsigned)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::stroke()
</UL>

<P><STRONG><a name="[4bd]"></a>agge::pod_vector&lang;unsigned&rang;::capacity() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZNK4agge10pod_vectorIjE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::resize(unsigned)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;unsigned&rang;::grow(unsigned)
</UL>

<P><STRONG><a name="[5d2]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[57f]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5d7]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[581]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5d9]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[583]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5db]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[585]"></a>agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_bgrENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5dd]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[58d]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5de]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[58f]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5df]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[591]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e0]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[593]"></a>agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_11pixel24_rgbENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e1]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[59b]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e2]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[59d]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e3]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[59f]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e4]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a1]"></a>agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_bgraENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e5]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a9]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e6]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5ab]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e7]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5ad]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e8]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5af]"></a>agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_12pixel32_rgbaENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5e9]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5b7]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5ea]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5b9]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5eb]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5bb]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5ec]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5bd]"></a>agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_bgr565ENS_6bitmapIS1_NS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5ed]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel24_rgb&rang;(T1&, const T2&)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5c5]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_11pixel24_rgbENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5ee]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_bgra&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5c7]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_bgraENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5ef]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEE9get_pixelEffRS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5c9]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_12pixel32_rgbaENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5f0]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEE9get_pixelEffRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;::row_ptr(unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_linear&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::floor(float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_convert&lang;agge::pixel32_rgba, agge::pixel16_bgr565&rang;(T1&, const T2&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5cb]"></a>agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, nanovg_agge.o(t._ZNK4agge20nanovg_image_blenderINS_14pixel16_rgb565ENS_6bitmapINS_14pixel16_bgr565ENS_10raw_bitmapEEEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned char agge::pixel_a&lang;agge::pixel32_rgba&rang;(const T1&, unsigned char)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;::get_pixel(float, float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5f2]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5f1]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[587]"></a>agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_bgrEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5f4]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5f3]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[595]"></a>agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_11pixel24_rgbEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5f6]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5f5]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a3]"></a>agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_bgraEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5f8]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEE8gradientEfRS1_))
<BR><BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5f7]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEE9get_colorEiiRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5b1]"></a>agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_12pixel32_rgbaEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5fa]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5f9]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5bf]"></a>agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_bgr565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5fc]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5fb]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5cd]"></a>agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_linear_gradientINS_14pixel16_rgb565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[5fe]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5fd]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[589]"></a>agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_bgrEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::operator ()(agge::pixel24_bgr*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_bgr, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[600]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[5ff]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[597]"></a>agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_11pixel24_rgbEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::operator ()(agge::pixel24_rgb*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel24_rgb, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[602]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[601]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5a5]"></a>agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_bgraEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::operator ()(agge::pixel32_bgra*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_bgra, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[604]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEE8gradientEfRS1_))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[603]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEE9get_colorEiiRS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5b3]"></a>agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_12pixel32_rgbaEEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::operator ()(agge::pixel32_rgba*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel32_rgba, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[606]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[605]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5c1]"></a>agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_bgr565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::operator ()(agge::pixel16_bgr565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_bgr565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[608]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EE8gradientEfRNS_12pixel32_rgbaE))
<BR><BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>

<P><STRONG><a name="[607]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EE9get_colorEiiRNS_12pixel32_rgbaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::sqrt(float)
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::gradient(float, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const
</UL>

<P><STRONG><a name="[5cf]"></a>agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, nanovg_agge.o(t._ZNK4agge23blender_radial_gradientINS_14pixel16_rgb565EEclEPS1_iijPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::operator ()(agge::pixel16_rgb565*, int, int, unsigned, const unsigned char*) const &rArr; agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const &rArr; agge::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::pixel_blend&lang;agge::pixel16_rgb565, agge::pixel32_rgba&rang;(T1&, const T2&, unsigned char)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;::get_color(int, int, agge::pixel32_rgba&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;::operator ()(int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[57a]"></a>void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, nanovg_agge.o(t._ZNK4agge7clipperIiE11line_clip_yINS_10rasterizerIS1_NS_7scalingIiEEEEEEvRT_iiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = void agge::clipper&lang;int&rang;::line_clip_y&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int, int, int, int, int) const &rArr; agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int) &rArr; agge::vector_rasterizer::line(int, int, int, int) &rArr; agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::line(int, int, int, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::muldiv(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::clipper&lang;int&rang;::line_to&lang;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;&rang;(T1&, int, int)
</UL>

<P><STRONG><a name="[4c3]"></a>agge::winding&lang;(unsigned char)8&rang;::operator ()(int) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nanovg_agge.o(t._ZNK4agge7windingILh8EEclEi))
<BR><BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_rgb565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_rgb565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_rgb565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel16_bgr565&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel16_bgr565, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_rgba&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_rgba, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel32_bgra&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel32_bgra, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_rgb&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_rgb, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_solid_color_rgb&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_radial_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::blender_linear_gradient&lang;agge::pixel24_bgr&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel16_bgr565, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_rgba, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel32_bgra, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::sweep_scanline&lang;(unsigned)8, agge::scanline_adapter&lang;agge::renderer::adapter&lang;agge::bitmap&lang;agge::pixel24_bgr, agge::raw_bitmap&rang;, agge::nanovg_image_blender&lang;agge::pixel24_bgr, agge::bitmap&lang;agge::pixel24_rgb, agge::raw_bitmap&rang;&rang;&rang;&rang;, const agge::vector_rasterizer::cell*, agge::winding&lang;(unsigned char)8&rang;&rang;(T2&, T3, T3, const T4&)
</UL>

<P><STRONG><a name="[167]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[696]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[697]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[14b]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b4]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sys.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cache_Enable
</UL>

<P><STRONG><a name="[1b3]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, sys.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cache_Enable
</UL>

<P><STRONG><a name="[1d6]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1d7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1e6]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1e7]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[c3]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1fe]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>UART_Receive_IT</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>UART_Transmit_IT</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>LTDC_SetConfig</STRONG> (Thumb, 530 bytes, Stack size 20 bytes, stm32h7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[1db]"></a>QSPI_Config</STRONG> (Thumb, 586 bytes, Stack size 12 bytes, stm32h7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[1da]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[2c5]"></a>assets_manager_get_locale_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_get_locale_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assets_manager_get_locale_info
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[2be]"></a>assets_manager_get_res_root</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_get_res_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = assets_manager_get_res_root &rArr; assets_manager_get_system_info
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
</UL>

<P><STRONG><a name="[2bf]"></a>assets_manager_get_system_info</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, assets_manager.o(i.assets_manager_get_system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = assets_manager_get_system_info
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_get_res_root
</UL>

<P><STRONG><a name="[2c9]"></a>assets_manager_load_impl</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, assets_manager.o(i.assets_manager_load_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_file
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_asset
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load
</UL>

<P><STRONG><a name="[2d7]"></a>assets_manager_ref_impl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, assets_manager.o(i.assets_manager_ref_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = assets_manager_ref_impl &rArr; assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_ref
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_find_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
</UL>

<P><STRONG><a name="[355]"></a>build_asset_dir_one_theme</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, assets_manager.o(i.build_asset_dir_one_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_build
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_one_theme
</UL>

<P><STRONG><a name="[2c1]"></a>build_asset_filename_custom</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, assets_manager.o(i.build_asset_filename_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = build_asset_filename_custom &rArr; tk_str_append &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_append
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
</UL>

<P><STRONG><a name="[2c2]"></a>build_asset_filename_default</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, assets_manager.o(i.build_asset_filename_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_one_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
</UL>

<P><STRONG><a name="[358]"></a>build_asset_filename_one_theme</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, assets_manager.o(i.build_asset_filename_one_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_str_append
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_dir_one_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_asset_filename_default
</UL>

<P><STRONG><a name="[2c0]"></a>device_pixel_ratio_to_str</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, assets_manager.o(i.device_pixel_ratio_to_str))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
</UL>

<P><STRONG><a name="[2d1]"></a>load_asset_from_file</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, assets_manager.o(i.load_asset_from_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = load_asset_from_file &rArr; asset_info_create &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read_part
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_get_size
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_exist
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_info_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_file
</UL>

<P><STRONG><a name="[2d0]"></a>subtype_from_extname</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, assets_manager.o(i.subtype_from_extname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = subtype_from_extname &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_file
</UL>

<P><STRONG><a name="[2cb]"></a>try_load_assets</STRONG> (Thumb, 140 bytes, Stack size 304 bytes, assets_manager.o(i.try_load_assets))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = try_load_assets &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_loader_load
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_asset
</UL>

<P><STRONG><a name="[2cc]"></a>try_load_image</STRONG> (Thumb, 192 bytes, Stack size 312 bytes, assets_manager.o(i.try_load_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_exist
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asset_loader_load
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_build_asset_filename
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_load_asset
</UL>

<P><STRONG><a name="[3c6]"></a>node_merge</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mem.o(i.node_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge2
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>

<P><STRONG><a name="[3c7]"></a>node_merge2</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mem.o(i.node_merge2))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>

<P><STRONG><a name="[3c2]"></a>tk_alloc_impl</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, mem.o(i.tk_alloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tk_alloc_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc_impl
</UL>

<P><STRONG><a name="[449]"></a>tk_calloc_impl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mem.o(i.tk_calloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
</UL>

<P><STRONG><a name="[388]"></a>tk_free_impl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, mem.o(i.tk_free_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc_impl
</UL>

<P><STRONG><a name="[430]"></a>tk_realloc_impl</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(i.tk_realloc_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free_impl
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc_impl
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[ee]"></a>system_info_get_prop</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, system_info.o(i.system_info_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = system_info_get_prop &rArr; value_set_int &rArr; value_set_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_str
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_set_int
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;locale_info
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_info.o(.constdata)
</UL>
<P><STRONG><a name="[446]"></a>system_info_normalize_app_root</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, system_info.o(i.system_info_normalize_app_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = system_info_normalize_app_root &rArr; tk_strdup &rArr; tk_strndup &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_app_info
</UL>

<P><STRONG><a name="[ed]"></a>system_info_on_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, system_info.o(i.system_info_on_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = system_info_on_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_info.o(.constdata)
</UL>
<P><STRONG><a name="[3a8]"></a>blend_pixel</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.blend_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[d0]"></a>lcd_mem_begin_frame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_mem_bgr565.o(i.lcd_mem_begin_frame))
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[39f]"></a>lcd_mem_create</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_mem_create &rArr; graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_with_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_w
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_type
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_lcd_h
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info_set_device_pixel_ratio
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create_double_fb
</UL>

<P><STRONG><a name="[39e]"></a>lcd_mem_create_double_fb</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_create_double_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lcd_mem_create_double_fb &rArr; lcd_mem_create &rArr; graphic_buffer_create_with_data &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_bgr565_create_double_fb
</UL>

<P><STRONG><a name="[dd]"></a>lcd_mem_destroy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcd_mem_bgr565.o(i.lcd_mem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_mem_destroy &rArr; vgcanvas_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_destroy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d6]"></a>lcd_mem_draw_glyph</STRONG> (Thumb, 314 bytes, Stack size 104 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_glyph))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcd_mem_draw_glyph &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d2]"></a>lcd_mem_draw_hline</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lcd_mem_draw_hline &rArr; lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d4]"></a>lcd_mem_draw_image</STRONG> (Thumb, 156 bytes, Stack size 128 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lcd_mem_draw_image &rArr; image_blend &rArr; soft_blend_image &rArr; blend_image_rgb565_rgba8888 &rArr; blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_blend
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d5]"></a>lcd_mem_draw_image_matrix</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_image_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_mem_draw_image_matrix &rArr; vgcanvas_draw_image
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_clip_rect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_get_vgcanvas
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_save
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_restore
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_transform
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_draw_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d7]"></a>lcd_mem_draw_points</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_mem_draw_points &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d1]"></a>lcd_mem_draw_vline</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, lcd_mem_bgr565.o(i.lcd_mem_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcd_mem_draw_vline &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[dc]"></a>lcd_mem_end_frame</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd_mem_bgr565.o(i.lcd_mem_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_mem_end_frame &rArr; lcd_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sync
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_swap
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_is_swappable
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d3]"></a>lcd_mem_fill_rect</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lcd_mem_fill_rect &rArr; lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[3a9]"></a>lcd_mem_fill_rect_with_color</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, lcd_mem_bgr565.o(i.lcd_mem_fill_rect_with_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lcd_mem_fill_rect_with_color &rArr; image_fill &rArr; soft_fill_rect &rArr; fill_rgba8888_rect &rArr; fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_fill
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_hline
</UL>

<P><STRONG><a name="[df]"></a>lcd_mem_flush</STRONG> (Thumb, 72 bytes, Stack size 160 bytes, lcd_mem_bgr565.o(i.lcd_mem_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lcd_mem_flush &rArr; image_rotate &rArr; soft_rotate_image &rArr; rotate_rgba8888_image &rArr; rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_rotate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[db]"></a>lcd_mem_get_desired_bitmap_format</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_desired_bitmap_format))
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[3a6]"></a>lcd_mem_get_line_length</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_line_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_mem_get_line_length
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_online_fb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_point_color
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[d8]"></a>lcd_mem_get_point_color</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_point_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_mem_get_point_color &rArr; lcd_mem_init_drawing_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[d9]"></a>lcd_mem_get_vgcanvas</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lcd_mem_bgr565.o(i.lcd_mem_get_vgcanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lcd_mem_get_vgcanvas &rArr; vgcanvas_create &rArr; nvgCreateAGGE &rArr; AGGENVGcontext::AGGENVGcontext() &rArr; agge::vector_rasterizer::vector_rasterizer() &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_reinit
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[3a7]"></a>lcd_mem_init_drawing_fb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lcd_mem_bgr565.o(i.lcd_mem_init_drawing_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_mem_init_drawing_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_attach
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_take_snapshot
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_vgcanvas
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_point_color
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_fill_rect_with_color
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_vline
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_points
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_image
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_draw_glyph
</UL>

<P><STRONG><a name="[3b4]"></a>lcd_mem_init_online_fb</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_init_online_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_mem_init_online_fb &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_set_line_length
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_attach
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_get_line_length
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_flush
</UL>

<P><STRONG><a name="[de]"></a>lcd_mem_resize</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lcd_mem_bgr565.o(i.lcd_mem_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_mem_resize
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[da]"></a>lcd_mem_take_snapshot</STRONG> (Thumb, 84 bytes, Stack size 104 bytes, lcd_mem_bgr565.o(i.lcd_mem_take_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lcd_mem_take_snapshot &rArr; bitmap_init &rArr; bitmap_alloc_data &rArr; graphic_buffer_create_for_bitmap &rArr; graphic_buffer_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_copy
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_mem_init_drawing_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_mem_bgr565.o(i.lcd_mem_create)
</UL>
<P><STRONG><a name="[340]"></a>blend_a_bgr565_bgra8888</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, blend_image_bgr565_bgr565.o(i.blend_a_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2f4]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr565_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>

<P><STRONG><a name="[2f3]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgr565
</UL>

<P><STRONG><a name="[341]"></a>blend_a_bgr565_bgra8888</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, blend_image_bgr565_bgra8888.o(i.blend_a_bgr565_bgra8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2f7]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_bgra8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
</UL>

<P><STRONG><a name="[2f6]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_bgra8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_bgra8888
</UL>

<P><STRONG><a name="[342]"></a>blend_a_bgr565_rgba8888</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, blend_image_bgr565_rgba8888.o(i.blend_a_bgr565_rgba8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blend_a_bgr565_rgba8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2fd]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a_bgr565_rgba8888
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
</UL>

<P><STRONG><a name="[2fc]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a_bgr565_rgba8888
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgba8888
</UL>

<P><STRONG><a name="[343]"></a>blend_a</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, blend_image_bgr888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[300]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
</UL>

<P><STRONG><a name="[2ff]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr565
</UL>

<P><STRONG><a name="[344]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_bgr888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[306]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
</UL>

<P><STRONG><a name="[305]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgra8888
</UL>

<P><STRONG><a name="[345]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_bgr888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[30c]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
</UL>

<P><STRONG><a name="[30b]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgba8888
</UL>

<P><STRONG><a name="[346]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_bgra8888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[30f]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
</UL>

<P><STRONG><a name="[30e]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgr565
</UL>

<P><STRONG><a name="[347]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_bgra8888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[312]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
</UL>

<P><STRONG><a name="[311]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_bgra8888
</UL>

<P><STRONG><a name="[348]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_bgra8888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[318]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
</UL>

<P><STRONG><a name="[317]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgba8888
</UL>

<P><STRONG><a name="[2e8]"></a>blend_a</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, blend_image_rgb565_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[31b]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb565_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
</UL>

<P><STRONG><a name="[31a]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgr565
</UL>

<P><STRONG><a name="[2e9]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_bgr565.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[2ea]"></a>blend_a</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blend_image_rgb565_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[31e]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
</UL>

<P><STRONG><a name="[31d]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_bgra8888
</UL>

<P><STRONG><a name="[2eb]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_bgra8888.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[2ec]"></a>blend_a</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, blend_image_rgb565_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[324]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
</UL>

<P><STRONG><a name="[323]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgba8888
</UL>

<P><STRONG><a name="[2ed]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_rgba8888.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[349]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_rgba8888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[336]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
</UL>

<P><STRONG><a name="[335]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgr565
</UL>

<P><STRONG><a name="[34a]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_rgba8888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[339]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
</UL>

<P><STRONG><a name="[338]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_bgra8888
</UL>

<P><STRONG><a name="[34b]"></a>blend_a</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, blend_image_rgba8888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[33f]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[33e]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgba8888
</UL>

<P><STRONG><a name="[359]"></a>clear_image</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, fill_image_bgr565.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[376]"></a>fill_image</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, fill_image_bgr565.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr565_rect
</UL>

<P><STRONG><a name="[35d]"></a>clear_image</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, fill_image_bgr888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[378]"></a>fill_image</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, fill_image_bgr888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgr888_rect
</UL>

<P><STRONG><a name="[35e]"></a>clear_image</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, fill_image_bgra8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[37a]"></a>fill_image</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fill_image_bgra8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_bgra8888_rect
</UL>

<P><STRONG><a name="[35f]"></a>clear_image</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, fill_image_rgb565.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[37b]"></a>fill_image</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, fill_image_rgb565.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb565_rect
</UL>

<P><STRONG><a name="[360]"></a>clear_image</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, fill_image_rgba8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[37c]"></a>fill_image</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fill_image_rgba8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgba8888_rect
</UL>

<P><STRONG><a name="[432]"></a>rotate_image</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, rotate_image_bgr565.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr565_image
</UL>

<P><STRONG><a name="[434]"></a>rotate_image</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, rotate_image_bgr888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgr888_image
</UL>

<P><STRONG><a name="[436]"></a>rotate_image</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, rotate_image_bgra8888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_bgra8888_image
</UL>

<P><STRONG><a name="[437]"></a>rotate_image</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, rotate_image_rgb565.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb565_image
</UL>

<P><STRONG><a name="[438]"></a>rotate_image</STRONG> (Thumb, 394 bytes, Stack size 88 bytes, rotate_image_rgba8888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgba8888_image
</UL>

<P><STRONG><a name="[2db]"></a>bitmap_format_to_nanovg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.bitmap_format_to_nanovg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_format_to_nanovg
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_create
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_reinit
</UL>

<P><STRONG><a name="[44e]"></a>toNVGcolor</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.toNVGcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = toNVGcolor &rArr; nvgRGBA
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_radial_gradient
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_stroke_linear_gradient
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_radial_gradient
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_linear_gradient
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_fill_color
</UL>

<P><STRONG><a name="[f7]"></a>vgcanvas_nanovg_arc</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = vgcanvas_nanovg_arc &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>vgcanvas_nanovg_arc_to</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_arc_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = vgcanvas_nanovg_arc_to &rArr; nvgArcTo &rArr; nvgArc &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>vgcanvas_nanovg_begin_frame</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vgcanvas_nanovg_begin_frame &rArr; nvgBeginFrame &rArr; nvgReset &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>vgcanvas_nanovg_begin_path</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_begin_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vgcanvas_nanovg_begin_path &rArr; nvgBeginPath
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>vgcanvas_nanovg_bezier_to</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bezier_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vgcanvas_nanovg_bezier_to &rArr; nvgBezierTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>vgcanvas_nanovg_bind_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_bind_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>vgcanvas_nanovg_clear_rect</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clear_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = vgcanvas_nanovg_clear_rect &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_set_fill_color
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>vgcanvas_nanovg_clip_rect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vgcanvas_nanovg_clip_rect &rArr; nvgScissor
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>vgcanvas_nanovg_close_path</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_close_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vgcanvas_nanovg_close_path &rArr; nvgClosePath &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>vgcanvas_nanovg_create_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_create_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>vgcanvas_nanovg_destroy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vgcanvas_nanovg_destroy &rArr; nvgDeleteInternal &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>vgcanvas_nanovg_destroy_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_destroy_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>vgcanvas_nanovg_draw_image</STRONG> (Thumb, 276 bytes, Stack size 224 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = vgcanvas_nanovg_draw_image &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRestore
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_set_antialias
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>vgcanvas_nanovg_ellipse</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = vgcanvas_nanovg_ellipse &rArr; nvgEllipse &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>vgcanvas_nanovg_end_frame</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_end_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vgcanvas_nanovg_end_frame &rArr; nvgEndFrame &rArr; nvgImageSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEndFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[461]"></a>vgcanvas_nanovg_ensure_image</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_ensure_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vgcanvas_nanovg_ensure_image &rArr; nvgCreateImageRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFindTextureRaw
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateImageRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_paint
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>

<P><STRONG><a name="[124]"></a>vgcanvas_nanovg_fbo_to_bitmap</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fbo_to_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vgcanvas_nanovg_fbo_to_bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>vgcanvas_nanovg_fill</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = vgcanvas_nanovg_fill &rArr; nvgFill &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>vgcanvas_nanovg_fill_text</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_fill_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_fill_text &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextAlign
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgText
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>vgcanvas_nanovg_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_flush))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>vgcanvas_nanovg_intersect_clip_rect</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_intersect_clip_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vgcanvas_nanovg_intersect_clip_rect &rArr; nvgIntersectScissor_ex &rArr; nvg__isectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>vgcanvas_nanovg_is_point_in_path</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_is_point_in_path))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>vgcanvas_nanovg_line_to</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_line_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vgcanvas_nanovg_line_to &rArr; nvgLineTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>vgcanvas_nanovg_measure_text</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_measure_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_measure_text &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextBounds
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTextAlign
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>vgcanvas_nanovg_move_to</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vgcanvas_nanovg_move_to &rArr; nvgMoveTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMoveTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>vgcanvas_nanovg_paint</STRONG> (Thumb, 170 bytes, Stack size 192 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = vgcanvas_nanovg_paint &rArr; nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgImagePattern
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_ensure_image
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>vgcanvas_nanovg_path_winding</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_path_winding))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vgcanvas_nanovg_path_winding &rArr; nvgPathWinding &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgPathWinding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>vgcanvas_nanovg_quad_to</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_quad_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vgcanvas_nanovg_quad_to &rArr; nvgQuadTo &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>vgcanvas_nanovg_reinit</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vgcanvas_nanovg_reinit &rArr; nvgReinitAgge &rArr; nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_format_to_nanovg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>vgcanvas_nanovg_reset</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_nanovg_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteFontByName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>vgcanvas_nanovg_restore</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vgcanvas_nanovg_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRestore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>vgcanvas_nanovg_rotate</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = vgcanvas_nanovg_rotate &rArr; nvgRotate &rArr; nvgTransformRotate &rArr; nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>vgcanvas_nanovg_rounded_rect</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_rounded_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = vgcanvas_nanovg_rounded_rect &rArr; nvgRoundedRect &rArr; nvgRoundedRectVarying &rArr; nvgRect &rArr; nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>vgcanvas_nanovg_save</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vgcanvas_nanovg_save &rArr; nvgSave &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgSave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>vgcanvas_nanovg_scale</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vgcanvas_nanovg_scale &rArr; nvgScale &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>vgcanvas_nanovg_set_antialias</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_antialias))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vgcanvas_nanovg_draw_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>vgcanvas_nanovg_set_fill_color</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vgcanvas_nanovg_set_fill_color &rArr; nvgFillColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>vgcanvas_nanovg_set_fill_linear_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_linear_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = vgcanvas_nanovg_set_fill_linear_gradient &rArr; nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>vgcanvas_nanovg_set_fill_radial_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_fill_radial_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vgcanvas_nanovg_set_fill_radial_gradient &rArr; nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>vgcanvas_nanovg_set_font</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = vgcanvas_nanovg_set_font &rArr; font_manager_get_font &rArr; font_manager_load &rArr; assets_manager_ref &rArr; assets_manager_ref_impl &rArr; assets_manager_load &rArr; assets_manager_load_impl &rArr; assets_manager_load_asset &rArr; try_load_image &rArr; assets_manager_build_asset_filename &rArr; build_asset_filename_default &rArr; build_asset_filename_one_theme &rArr; build_asset_dir_one_theme &rArr; path_build &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager_get_font
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_unref
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager_ref
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assets_manager
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_manager
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontFaceId
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFindFont
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateFontMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>vgcanvas_nanovg_set_font_size</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_font_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_font_size &rArr; nvgFontSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>vgcanvas_nanovg_set_global_alpha</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_global_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_global_alpha &rArr; nvgGlobalAlpha
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGlobalAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>vgcanvas_nanovg_set_line_cap</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_cap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_nanovg_set_line_cap &rArr; nvgLineCap
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineCap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>vgcanvas_nanovg_set_line_join</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vgcanvas_nanovg_set_line_join &rArr; nvgLineJoin
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>vgcanvas_nanovg_set_line_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_line_width &rArr; nvgStrokeWidth
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>vgcanvas_nanovg_set_miter_limit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_miter_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vgcanvas_nanovg_set_miter_limit &rArr; nvgMiterLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMiterLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>vgcanvas_nanovg_set_stroke_color</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vgcanvas_nanovg_set_stroke_color &rArr; nvgStrokeColor &rArr; nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRGBA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>vgcanvas_nanovg_set_stroke_linear_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_linear_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = vgcanvas_nanovg_set_stroke_linear_gradient &rArr; nvgLinearGradient &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>vgcanvas_nanovg_set_stroke_radial_gradient</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_stroke_radial_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vgcanvas_nanovg_set_stroke_radial_gradient &rArr; nvgRadialGradient &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toNVGcolor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>vgcanvas_nanovg_set_text_align</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_align))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>vgcanvas_nanovg_set_text_baseline</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_text_baseline))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>vgcanvas_nanovg_set_transform</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_set_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vgcanvas_nanovg_set_transform &rArr; nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>vgcanvas_nanovg_stroke</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_stroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = vgcanvas_nanovg_stroke &rArr; nvgStroke &rArr; nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>vgcanvas_nanovg_transform</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vgcanvas_nanovg_transform &rArr; nvgTransform &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>vgcanvas_nanovg_translate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_translate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vgcanvas_nanovg_translate &rArr; nvgTranslate &rArr; nvgTransformPremultiply &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>vgcanvas_nanovg_unbind_fbo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vgcanvas_nanovg_soft.o(i.vgcanvas_nanovg_unbind_fbo))
<BR>[Address Reference Count : 1]<UL><LI> vgcanvas_nanovg_soft.o(.constdata)
</UL>
<P><STRONG><a name="[364]"></a>darray_extend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, darray.o(i.darray_extend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = darray_extend &rArr; tk_realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;darray_push
</UL>

<P><STRONG><a name="[361]"></a>clear_image</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, fill_image_abgr8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[372]"></a>fill_image</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fill_image_abgr8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_abgr8888_rect
</UL>

<P><STRONG><a name="[362]"></a>clear_image</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, fill_image_argb8888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[374]"></a>fill_image</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, fill_image_argb8888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_argb8888_rect
</UL>

<P><STRONG><a name="[129]"></a>graphic_buffer_default_attach</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, graphic_buffer_default.o(i.graphic_buffer_default_attach))
<BR>[Address Reference Count : 1]<UL><LI> graphic_buffer_default.o(.constdata)
</UL>
<P><STRONG><a name="[38c]"></a>graphic_buffer_default_create</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, graphic_buffer_default.o(i.graphic_buffer_default_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = graphic_buffer_default_create &rArr; tk_calloc &rArr; tk_calloc_impl &rArr; tk_alloc_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp_of_format
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_calloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_buffer_create_for_bitmap
</UL>

<P><STRONG><a name="[12a]"></a>graphic_buffer_default_destroy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, graphic_buffer_default.o(i.graphic_buffer_default_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = graphic_buffer_default_destroy &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graphic_buffer_default.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>graphic_buffer_default_lock_for_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, graphic_buffer_default.o(i.graphic_buffer_default_lock_for_read))
<BR>[Address Reference Count : 1]<UL><LI> graphic_buffer_default.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>graphic_buffer_default_lock_for_write</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, graphic_buffer_default.o(i.graphic_buffer_default_lock_for_write))
<BR>[Address Reference Count : 1]<UL><LI> graphic_buffer_default.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>graphic_buffer_default_unlock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, graphic_buffer_default.o(i.graphic_buffer_default_unlock))
<BR>[Address Reference Count : 1]<UL><LI> graphic_buffer_default.o(.constdata)
</UL>
<P><STRONG><a name="[34c]"></a>blend_a</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, blend_image_rgb888_bgr565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[327]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb888_bgr565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgr565
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[326]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb888_bgr565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgr565
</UL>

<P><STRONG><a name="[34d]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_rgb888_bgra8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[32a]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb888_bgra8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgra8888
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[329]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb888_bgra8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_bgra8888
</UL>

<P><STRONG><a name="[34e]"></a>blend_a</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, blend_image_rgb888_rgba8888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[333]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb888_rgba8888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgba8888
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[332]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb888_rgba8888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgba8888
</UL>

<P><STRONG><a name="[363]"></a>clear_image</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, fill_image_rgb888.o(i.clear_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset32
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset24
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_image
</UL>

<P><STRONG><a name="[37d]"></a>fill_image</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, fill_image_rgb888.o(i.fill_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = fill_image &rArr; clear_image &rArr; tk_memset24
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_image
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_rgb888_rect
</UL>

<P><STRONG><a name="[439]"></a>rotate_image</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, rotate_image_rgb888.o(i.rotate_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rotate_image &rArr; bitmap_get_line_length &rArr; bitmap_set_line_length &rArr; bitmap_get_bpp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_rgb888_image
</UL>

<P><STRONG><a name="[2ee]"></a>blend_a</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, blend_image_bgr565_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[2fa]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr565_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgb565
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[2f9]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr565_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr565_rgb565
</UL>

<P><STRONG><a name="[2ef]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_bgr565_rgb565.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[34f]"></a>blend_a</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, blend_image_bgr888_bgr888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[303]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr888_bgr888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr888
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[302]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_bgr888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_bgr888
</UL>

<P><STRONG><a name="[350]"></a>blend_a</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, blend_image_bgr888_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[309]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgr888_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgb565
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[308]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgr888_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgr888_rgb565
</UL>

<P><STRONG><a name="[351]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_bgra8888_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[315]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_bgra8888_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgb565
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[314]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_bgra8888_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_bgra8888_rgb565
</UL>

<P><STRONG><a name="[2f0]"></a>blend_a</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, blend_image_rgb565_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[321]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb565_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgb565
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[320]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb565_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a &rArr; blend_rgba
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb565_rgb565
</UL>

<P><STRONG><a name="[2f1]"></a>blend_rgba</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, blend_image_rgb565_rgb565.o(i.blend_rgba))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blend_rgba
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>

<P><STRONG><a name="[352]"></a>blend_a</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, blend_image_rgb888_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[32d]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb888_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb565
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[32c]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb888_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb565
</UL>

<P><STRONG><a name="[353]"></a>blend_a</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, blend_image_rgb888_rgb888.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[330]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgb888_rgb888.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb888
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[32f]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgb888_rgb888.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgb888_rgb888
</UL>

<P><STRONG><a name="[354]"></a>blend_a</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, blend_image_rgba8888_rgb565.o(i.blend_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>

<P><STRONG><a name="[33c]"></a>blend_image_with_alpha</STRONG> (Thumb, 538 bytes, Stack size 152 bytes, blend_image_rgba8888_rgb565.o(i.blend_image_with_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_unlock_buffer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_write
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_lock_buffer_for_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_line_length
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_get_bpp
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_a
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgb565
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_without_alpha
</UL>

<P><STRONG><a name="[33b]"></a>blend_image_without_alpha</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, blend_image_rgba8888_rgb565.o(i.blend_image_without_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = blend_image_without_alpha &rArr; blend_image_with_alpha &rArr; blend_a
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_with_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blend_image_rgba8888_rgb565
</UL>

<P><STRONG><a name="[3c9]"></a>nvg__absf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nanovg.o(i.nvg__absf))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
</UL>

<P><STRONG><a name="[3d4]"></a>nvg__acosf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvg__acosf &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[41c]"></a>nvg__addPath</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nanovg.o(i.nvg__addPath))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvg__addPath &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[41d]"></a>nvg__addPoint</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nanovg.o(i.nvg__addPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvg__addPoint &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPoint
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[3e3]"></a>nvg__allocPathCache</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nanovg.o(i.nvg__allocPathCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__allocPathCache &rArr; nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__deletePathCache
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[420]"></a>nvg__allocTempVerts</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nanovg.o(i.nvg__allocTempVerts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
</UL>

<P><STRONG><a name="[3ce]"></a>nvg__appendCommands</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, nanovg.o(i.nvg__appendCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvg__appendCommands &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformPoint
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__getState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRect
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgQuadTo
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgPathWinding
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMoveTo
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineTo
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgEllipse
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgClosePath
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBezierTo
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[3d7]"></a>nvg__atan2f</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg.o(i.nvg__atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvg__atan2f &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[414]"></a>nvg__clampf</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvg__clampf))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[3dd]"></a>nvg__clearPathCache</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nanovg.o(i.nvg__clearPathCache))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginPath
</UL>

<P><STRONG><a name="[422]"></a>nvg__closePath</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__closePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvg__closePath
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[408]"></a>nvg__compositeOperationState</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, nanovg.o(i.nvg__compositeOperationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvg__compositeOperationState
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[3cc]"></a>nvg__cosf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nvg__cosf &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
</UL>

<P><STRONG><a name="[3d6]"></a>nvg__cross</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__cross))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[423]"></a>nvg__curveDivs</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nanovg.o(i.nvg__curveDivs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nvg__curveDivs &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxi
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
</UL>

<P><STRONG><a name="[3e4]"></a>nvg__deletePathCache</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nanovg.o(i.nvg__deletePathCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvg__deletePathCache &rArr; free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgDeleteInternal
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocPathCache
</UL>

<P><STRONG><a name="[3d1]"></a>nvg__distPtSeg</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, nanovg.o(i.nvg__distPtSeg))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[3ec]"></a>nvg__expandFill</STRONG> (Thumb, 648 bytes, Stack size 104 bytes, nanovg.o(i.nvg__expandFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = nvg__expandFill &rArr; nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__vset
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>

<P><STRONG><a name="[415]"></a>nvg__expandStroke</STRONG> (Thumb, 618 bytes, Stack size 112 bytes, nanovg.o(i.nvg__expandStroke))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nvg__expandStroke &rArr; nvg__allocTempVerts &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__vset
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__allocTempVerts
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[3eb]"></a>nvg__flattenPaths</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, nanovg.o(i.nvg__flattenPaths))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nvg__flattenPaths &rArr; nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__ptEquals
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyReverse
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyArea
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__pathWinding
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__minf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPoint
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__closePath
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPath
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
</UL>

<P><STRONG><a name="[413]"></a>nvg__getAverageScale</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nanovg.o(i.nvg__getAverageScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__getAverageScale &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
</UL>

<P><STRONG><a name="[3ea]"></a>nvg__getState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nanovg.o(i.nvg__getState))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTranslate
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransform
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeWidth
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokePaint
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStroke
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScale
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRotate
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgResetTransform
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgMiterLimit
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineJoin
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLineCap
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgGlobalAlpha
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFontSize
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillPaint
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFill
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__appendCommands
</UL>

<P><STRONG><a name="[3f9]"></a>nvg__isectRects</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, nanovg.o(i.nvg__isectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvg__isectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__minf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__maxf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgIntersectScissor_ex
</UL>

<P><STRONG><a name="[41e]"></a>nvg__lastPath</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__lastPath))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__pathWinding
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__closePath
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[41f]"></a>nvg__lastPoint</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nanovg.o(i.nvg__lastPoint))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[3fd]"></a>nvg__maxf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg.o(i.nvg__maxf))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgScissor
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRadialGradient
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgLinearGradient
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__isectRects
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[3cb]"></a>nvg__maxi</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__maxi))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__curveDivs
</UL>

<P><STRONG><a name="[40e]"></a>nvg__minf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg.o(i.nvg__minf))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__isectRects
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[3ca]"></a>nvg__mini</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg.o(i.nvg__mini))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
</UL>

<P><STRONG><a name="[3d3]"></a>nvg__normalize</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nanovg.o(i.nvg__normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__normalize &rArr; nvg__sqrtf &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[426]"></a>nvg__pathWinding</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__pathWinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvg__pathWinding
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__lastPath
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[427]"></a>nvg__polyArea</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nanovg.o(i.nvg__polyArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__polyArea
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__triarea2
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[428]"></a>nvg__polyReverse</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, nanovg.o(i.nvg__polyReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvg__polyReverse &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[3d0]"></a>nvg__ptEquals</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__ptEquals))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
</UL>

<P><STRONG><a name="[3db]"></a>nvg__setDevicePixelRatio</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__setDevicePixelRatio))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgBeginFrame
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateInternal
</UL>

<P><STRONG><a name="[3ee]"></a>nvg__setPaintColor</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, nanovg.o(i.nvg__setPaintColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvg__setPaintColor &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformIdentity
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgStrokeColor
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgFillColor
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReset
</UL>

<P><STRONG><a name="[40f]"></a>nvg__signf</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nanovg.o(i.nvg__signf))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgRoundedRectVarying
</UL>

<P><STRONG><a name="[3cd]"></a>nvg__sinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nvg__sinf &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgTransformRotate
</UL>

<P><STRONG><a name="[429]"></a>nvg__sqrtf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvg__sqrtf &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__normalize
</UL>

<P><STRONG><a name="[3d5]"></a>nvg__tanf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nanovg.o(i.nvg__tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nvg__tanf &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgArcTo
</UL>

<P><STRONG><a name="[425]"></a>nvg__tesselateBezier</STRONG> (Thumb, 458 bytes, Stack size 112 bytes, nanovg.o(i.nvg__tesselateBezier))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = nvg__tesselateBezier &rArr;  nvg__tesselateBezier (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__addPoint
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__absf
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__tesselateBezier
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__flattenPaths
</UL>

<P><STRONG><a name="[42a]"></a>nvg__triarea2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nanovg.o(i.nvg__triarea2))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__polyArea
</UL>

<P><STRONG><a name="[424]"></a>nvg__vset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nanovg.o(i.nvg__vset))
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandStroke
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvg__expandFill
</UL>

<P><STRONG><a name="[140]"></a>__sti___8_math_cpp_059a9964</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math.o(i.__sti___8_math_cpp_059a9964))
<BR>[Address Reference Count : 1]<UL><LI> math.o(.init_array)
</UL>
<P><STRONG><a name="[277]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a614add_and_commitERPNS_17vector_rasterizer4cellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add_and_commit(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[274]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::add(agge::vector_rasterizer::cell*, int, int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a63addEPNS_17vector_rasterizer4cellEii))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[279]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a63setEPNS_17vector_rasterizer4cellEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int) &rArr; agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[278]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a64setaEPNS_17vector_rasterizer4cellEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::seta(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::set(agge::vector_rasterizer::cell*, int, int, int, int)
</UL>

<P><STRONG><a name="[273]"></a>agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vector_rasterizer.o(i._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a67jump_xyERPNS_17vector_rasterizer4cellEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::jump_xy(agge::vector_rasterizer::cell*&, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::hline(agge::vector_rasterizer::cell*&, agge::precise_delta&, int, int, int, int)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[26e]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_max&lang;int&rang;(T1&, T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a610update_maxIiEEvRT_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
</UL>

<P><STRONG><a name="[26d]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::update_min&lang;int&rang;(T1&, T1)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a610update_minIiEEvRT_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::extend_bounds(int, int)
</UL>

<P><STRONG><a name="[284]"></a>void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a622sort_cells_x_ascendingIPNS_17vector_rasterizer4cellEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::sort_cells_x_ascending&lang;agge::vector_rasterizer::cell*&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::sort(bool)
</UL>

<P><STRONG><a name="[272]"></a>agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vector_rasterizer.o(t._ZN4agge45_GLOBAL__N__21_vector_rasterizer_cpp_589099a69resize_byINS_10pod_vectorINS_17vector_rasterizer4cellEEEEEPS4_RT_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = agge::vector_rasterizer::cell* agge::&lang;unnamed namespace _21_vector_rasterizer_cpp_589099a6&rang;::resize_by&lang;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;&rang;(T1&, int) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::size() const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::line(int, int, int, int)
</UL>

<P><STRONG><a name="[249]"></a>nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z11nvgInitAGGEP14AGGENVGcontextP9NVGparamsjjj10NVGtexturePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvgInitAGGE(AGGENVGcontext*, NVGparams*, unsigned, unsigned, unsigned, NVGtexture, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgReinitAgge
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvgCreateAGGE
</UL>

<P><STRONG><a name="[25b]"></a>aggenvg__maxi(int, int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z13aggenvg__maxiii))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
</UL>

<P><STRONG><a name="[24b]"></a>to_pixel32_rgba(NVGcolor)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z15to_pixel32_rgba8NVGcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = to_pixel32_rgba(NVGcolor) &rArr; agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::pixel32_rgba::pixel32_rgba(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[24d]"></a>prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*)</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, nanovg_agge.o(i._Z17prepareRasterizerP14AGGENVGcontextP10NVGscissorP8NVGpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prepareRasterizer(AGGENVGcontext*, NVGscissor*, NVGpaint*) &rArr; agge::vector_rasterizer::reset() &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::resize(unsigned) &rArr; agge::pod_vector&lang;agge::vector_rasterizer::cell&rang;::grow(unsigned) &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::vector_rasterizer::reset()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rasterizer&lang;agge::clipper&lang;int&rang;, agge::scaling&lang;int&rang;&rang;::set_clipping(const agge::rect&lang;float&rang;&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::rect&lang;T1&rang; mkrect&lang;float&rang;(T1, T1, T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderStroke&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, float, const NVGpath*, int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_rgb565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel16_bgr565&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_rgba&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel32_bgra&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_rgb&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderFill&lang;agge::pixel24_bgr&rang;(void*, NVGpaint*, NVGcompositeOperationState, NVGscissor*, float, const float*, const NVGpath*, int)
</UL>

<P><STRONG><a name="[e1]"></a>aggenvg__setLineCap(void*, int)</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z19aggenvg__setLineCapPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aggenvg__setLineCap(void*, int) &rArr; void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&) &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::~butt()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_cap&lang;agge::caps::butt&rang;(const T1&)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::cap__sub_object()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::cap::cap__sub_object(const agge::stroke::cap&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::caps::butt::butt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[261]"></a>aggenvg__findTexture(AGGENVGcontext*, int)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z20aggenvg__findTextureP14AGGENVGcontexti))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderGetTextureSize(void*, int, int*, int*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_rgb565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel16_bgr565&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_rgba&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel32_bgra&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_rgb&rang;(AGGENVGcontext*, NVGpaint*)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void renderPaint&lang;agge::pixel24_bgr&rang;(AGGENVGcontext*, NVGpaint*)
</UL>

<P><STRONG><a name="[ea]"></a>aggenvg__renderFlush(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z20aggenvg__renderFlushPv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e0]"></a>aggenvg__setLineJoin(void*, int)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z20aggenvg__setLineJoinPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aggenvg__setLineJoin(void*, int) &rArr; void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&) &rArr; operator new(unsigned) &rArr; tk_alloc &rArr; tk_mem_on_out_of_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::~bevel()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void agge::stroke::set_join&lang;agge::joins::bevel&rang;(const T1&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::join__sub_object()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::stroke::join::join__sub_object(const agge::stroke::join&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agge::joins::bevel::bevel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[25a]"></a>aggenvg__allocTexture(AGGENVGcontext*)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z21aggenvg__allocTextureP14AGGENVGcontext))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aggenvg__allocTexture(AGGENVGcontext*) &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__maxi(int, int)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*)
</UL>

<P><STRONG><a name="[e9]"></a>aggenvg__renderCancel(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z21aggenvg__renderCancelPv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e2]"></a>aggenvg__renderCreate(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z21aggenvg__renderCreatePv))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[eb]"></a>aggenvg__renderDelete(void*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z21aggenvg__renderDeletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aggenvg__renderDelete(void*) &rArr; AGGENVGcontext::~AGGENVGcontext() &rArr; agge::stroke::~stroke() &rArr; operator delete[] (void*) &rArr; tk_free &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AGGENVGcontext::~AGGENVGcontext()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[260]"></a>aggenvg__deleteTexture(AGGENVGcontext*, int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z22aggenvg__deleteTextureP14AGGENVGcontexti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aggenvg__deleteTexture(AGGENVGcontext*, int) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderDeleteTexture(void*, int)
</UL>

<P><STRONG><a name="[e8]"></a>aggenvg__renderViewport(void*, float, float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nanovg_agge.o(i._Z23aggenvg__renderViewportPvfff))
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e3]"></a>aggenvg__renderFindTexture(void*, const void*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nanovg_agge.o(i._Z26aggenvg__renderFindTexturePvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aggenvg__renderFindTexture(void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e4]"></a>aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z28aggenvg__renderCreateTexturePviiiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = aggenvg__renderCreateTexture(void*, int, int, int, int, int, const unsigned char*) &rArr; aggenvg__allocTexture(AGGENVGcontext*) &rArr; realloc &rArr; tk_realloc_impl &rArr; tk_free_impl &rArr; node_merge &rArr;  node_merge (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__renderFindTexture(void*, const void*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__allocTexture(AGGENVGcontext*)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e5]"></a>aggenvg__renderDeleteTexture(void*, int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nanovg_agge.o(i._Z28aggenvg__renderDeleteTexturePvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aggenvg__renderDeleteTexture(void*, int) &rArr; aggenvg__deleteTexture(AGGENVGcontext*, int) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__deleteTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e6]"></a>aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, nanovg_agge.o(i._Z28aggenvg__renderUpdateTexturePviiiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aggenvg__renderUpdateTexture(void*, int, int, int, int, int, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[e7]"></a>aggenvg__renderGetTextureSize(void*, int, int*, int*)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nanovg_agge.o(i._Z29aggenvg__renderGetTextureSizePviPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aggenvg__renderGetTextureSize(void*, int, int*, int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggenvg__findTexture(AGGENVGcontext*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nanovg_agge.o(i.nvgCreateAGGE)
</UL>
<P><STRONG><a name="[c1]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
